AWSTemplateFormatVersion: '2010-09-09'
Description: Creates an AWS Network Load balancer, which multiplexes traffic to registered
  scaled out back end web servers
Parameters:
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.medium
    AllowedValues:
      - t1.micro
      - t2.micro
      - t2.small
      - t2.medium
      - m1.large
      - m3.xlarge
      - c4.2xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  KeyName:
    Description: Amazon EC2 Key Pair
    Type: AWS::EC2::KeyPair::KeyName
  VPCName:
    Description: Name of the newly created VPC
    Type: String
    MinLength: '6'
    MaxLength: '75'
    Default: albspokeVPC
  VpcAzs:
    Type: List<AWS::EC2::AvailabilityZone::Name>
    Description: Enter the list of Availability Zones (Based on Number of AZs above)
  NumberOfAZs:
    Description: Total Number of AZs which will be used in this deployment (Min 2
      and Max 4 depending on az availability)
    Type: Number
    MinValue: '2'
    Default: '2'
    MaxValue: '4'
  ILBName:
    Type: String
    Description: Enter the name to associate with the ILB
    Default: prot-ilb
    MinLength: '3'
    MaxLength: '120'
  QueueURL:
    Type: String
    Description: Enter the URL of the Queue to send ILB updates to
    MinLength: '3'
    MaxLength: '1024'
    Default: https://sqs.us-east-1.amazonaws.com/106808901653/justin-asgv21-NetworkLoadBalancerQueue-18QKQQ2NFC054
  SSHLocation:
    Description: Restrict SSH & HTTPS access to the Web Servers (by default can be
      accessed from anywhere)
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: '0.0.0.0/0'
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x.
  S3BucketName:
    Type: String
    Description: Enter the name of the S3 Bucket which contains the lambda function
      code
    Default: asgv21-justin
  LambdaZipFileName:
    Type: String
    Description: Enter the name of the S3 object which contains the lambda function
      code
    Default: ilb.zip
  PeerConnectionTargetCIDRs:
    Type: CommaDelimitedList
    Default: 192.168.2.0/24,192.168.12.0/24
    Description: Comma delimited List of firewall ILB subnet CIDRs to allow traffic
      from (based on number of firewall AZs above)
  NumberOfFWAZs:
    Description: Total number of AZs in the firewall deployment (Min 2 and Max 4 depending
      on az availability)
    Type: Number
    MinValue: '2'
    MaxValue: '2'
    Default: '2'
  VPCCIDR:
    Type: String
    Default: 172.32.0.0/16
    Description: Enter the VPC CIDR that you want to use
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: Must be a valid CIDR range of the form x.x.x.x/x.
  VPCSubnetCIDRs:
    Type: CommaDelimitedList
    Default: 172.32.0.0/24, 172.32.1.0/24
    Description: Comma-delimited list of CIDR blocks for the application ILB subnets
  TGWID:
    Type: String
    Default: tgw-08ba52ffc2d66b864
    Description: Transit Gateway resource ID (i.e. tgw-xxxxxx)
  SpokeVPCRouteTable:
    Type: String
    Default: tgw-rtb-0806a3f895190d22a
    Description: Transit Gateway Route Table associated with spoke VPCs
      (i.e. tgw-rtb-xxxxxx)
    AllowedPattern: .+
  VpcSummaryRoute:
    Description: In this case we use the default as this is a spoke
    Type: String
    Default: default
    AllowedValues:
      - rfc-1918
      - default
  SecurityHubRouteTable:
    Type: String
    Default: tgw-rtb-04b38d4cf50530033
    Description: Transit Gateway Route Table associated with security VPCs
      VPC attachment (i.e. tgw-rtb-xxxxxx)
    AllowedPattern: .+
  SameAccount:
    Type: String
    Default: 'true'
    Description: Flag to indicate if the application will be deployed into the same
      account as the firewall, or a different one
    AllowedValues:
      - 'true'
      - 'false'
  CrossAccountRole:
    Type: String
    Description: Enter the ARN of the role to be used.
    Default: ''
Mappings:
  Constants:
    S3URL:
      URL1: https://s3.amazonaws.com
    ILB:
      Type: application
  AWSInstanceType2Arch:
    t1.micro:
      Arch: PV64
    t2.micro:
      Arch: HVM64
    t2.small:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    m1.small:
      Arch: PV64
    m1.medium:
      Arch: PV64
    m1.large:
      Arch: PV64
    m1.xlarge:
      Arch: PV64
    m2.xlarge:
      Arch: PV64
    m2.2xlarge:
      Arch: PV64
    m2.4xlarge:
      Arch: PV64
    m3.medium:
      Arch: HVM64
    m3.large:
      Arch: HVM64
    m3.xlarge:
      Arch: HVM64
    m3.2xlarge:
      Arch: HVM64
    c1.medium:
      Arch: PV64
    c1.xlarge:
      Arch: PV64
    c3.large:
      Arch: HVM64
    c3.xlarge:
      Arch: HVM64
    c3.2xlarge:
      Arch: HVM64
    c3.4xlarge:
      Arch: HVM64
    c3.8xlarge:
      Arch: HVM64
    c4.large:
      Arch: HVM64
    c4.xlarge:
      Arch: HVM64
    c4.2xlarge:
      Arch: HVM64
    c4.4xlarge:
      Arch: HVM64
    c4.8xlarge:
      Arch: HVM64
    g2.2xlarge:
      Arch: HVMG2
    r3.large:
      Arch: HVM64
    r3.xlarge:
      Arch: HVM64
    r3.2xlarge:
      Arch: HVM64
    r3.4xlarge:
      Arch: HVM64
    r3.8xlarge:
      Arch: HVM64
    i2.xlarge:
      Arch: HVM64
    i2.2xlarge:
      Arch: HVM64
    i2.4xlarge:
      Arch: HVM64
    i2.8xlarge:
      Arch: HVM64
    d2.xlarge:
      Arch: HVM64
    d2.2xlarge:
      Arch: HVM64
    d2.4xlarge:
      Arch: HVM64
    d2.8xlarge:
      Arch: HVM64
    hi1.4xlarge:
      Arch: HVM64
    hs1.8xlarge:
      Arch: HVM64
    cr1.8xlarge:
      Arch: HVM64
    cc2.8xlarge:
      Arch: HVM64
  AWSRegionArch2AMI:
    us-east-1:
      PV64: ami-1ccae774
      HVM64: ami-1ecae776
      HVMG2: ami-8c6b40e4
    us-east-2:
      PV64: NOT_SUPPORTED
      HVM64: ami-c55673a0
      HVMG2: NOT_SUPPORTED
    us-west-2:
      PV64: ami-ff527ecf
      HVM64: ami-e7527ed7
      HVMG2: ami-abbe919b
    us-west-1:
      PV64: ami-d514f291
      HVM64: ami-d114f295
      HVMG2: ami-f31ffeb7
    eu-west-1:
      PV64: ami-bf0897c8
      HVM64: ami-a10897d6
      HVMG2: ami-d5bc24a2
    eu-central-1:
      PV64: ami-ac221fb1
      HVM64: ami-a8221fb5
      HVMG2: ami-7cd2ef61
    ap-northeast-1:
      PV64: ami-27f90e27
      HVM64: ami-cbf90ecb
      HVMG2: ami-6318e863
    ap-southeast-1:
      PV64: ami-acd9e8fe
      HVM64: ami-68d8e93a
      HVMG2: ami-3807376a
    ap-southeast-2:
      PV64: ami-ff9cecc5
      HVM64: ami-fd9cecc7
      HVMG2: ami-89790ab3
    sa-east-1:
      PV64: ami-bb2890a6
      HVM64: ami-b52890a8
      HVMG2: NOT_SUPPORTED
    cn-north-1:
      PV64: ami-fa39abc3
      HVM64: ami-f239abcb
      HVMG2: NOT_SUPPORTED
    eu-west-2:
      PV64: NOT_SUPPORTED
      HVM64: ami-1a7f6d7e
      HVMG2: NOT_SUPPORTED
    ca-central-1:
      PV64: NOT_SUPPORTED
      HVM64: ami-fd55ec99
      HVMG2: NOT_SUPPORTED
    ap-south-1:
      PV64: NOT_SUPPORTED
      HVM64: ami-4fc58420
      HVMG2: NOT_SUPPORTED
    ap-northeast-2:
      PV64: NOT_SUPPORTED
      HVM64: ami-249b554a
      HVMG2: NOT_SUPPORTED
Conditions:
  IsSameAccount: !Equals
    - !Ref 'SameAccount'
    - 'true'
  IsCrossAccount: !Equals
    - !Ref 'SameAccount'
    - 'false'
  FwAz2: !Equals
    - !Ref 'NumberOfFWAZs'
    - '2'
  FwAz3: !Equals
    - !Ref 'NumberOfFWAZs'
    - '3'
  FwAz3more: !Or
    - !Equals
      - !Ref 'NumberOfFWAZs'
      - '3'
    - !Equals
      - !Ref 'NumberOfFWAZs'
      - '4'
  FwAz4: !Equals
    - !Ref 'NumberOfFWAZs'
    - '4'
  CreateSubnet2: !Equals
    - !Ref 'NumberOfAZs'
    - '2'
  CreateSubnet3: !Equals
    - !Ref 'NumberOfAZs'
    - '3'
  CreateSubnet3more: !Or
    - !Equals
      - !Ref 'NumberOfAZs'
      - '3'
    - !Equals
      - !Ref 'NumberOfAZs'
      - '4'
  CreateSubnet4: !Equals
    - !Ref 'NumberOfAZs'
    - '4'
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: New VPC Section
        Parameters:
          - NumberOfAZs
          - VpcAzs
          - VPCName
          - VPCCIDR
          - VPCSubnetCIDRs
          - SubnetIDs
      - Label:
          default: Load Balancer Section
        Parameters:
          - ILBName
      - Label:
          default: Lambda Section
        Parameters:
          - S3BucketName
          - LambdaZipFileName
          - QueueURL
      - Label:
          default: Application Section
        Parameters:
          - InstanceType
      - Label:
          default: Access Section
        Parameters:
          - KeyName
          - SSHLocation
      - Label:
          default: TGW Peering Section
        Parameters:
          - NumberOfFWAZs
          - PeerConnectionTargetCIDRs
      - Label:
          default: Cross Account Deployment
        Parameters:
          - SameAccount
          - CrossAccountRole
    ParameterLabels:
      NumberOfAZs:
        default: 'Number of AZs for Deployment:'
      VpcAzs:
        default: 'Select List of AZ:'
      VPCName:
        default: 'VPC Name:'
      VPCCIDR:
        default: 'VPC CIDR:'
      VPCSubnetCIDRs:
        default: 'VPC Subnet CIDRs:'
      ILBName:
        default: 'ILB Name:'
      S3BucketName:
        default: 'S3 Bucket Name:'
      LambdaZipFileName:
        default: 'Lambda Zip File Name:'
      QueueURL:
        default: 'SQS Queue URL:'
      InstanceType:
        default: 'Instance Type of Web Servers Behind ILB:'
      KeyName:
        default: 'Key Pair:'
      SSHLocation:
        default: 'SSH From:'
      NumberOfFWAZs:
        default: 'Number of Firewall AZs:'
      PeerConnectionTargetCIDRs:
        default: Summary CIDR of ILB subnets
      CrossAccountRole:
        default: 'Cross Account Role ARN:'
      SameAccount:
        default: 'Same Account Deployment:'
Resources:
  TGWAttachment:
    Type: AWS::EC2::TransitGatewayAttachment
    Properties:
      SubnetIds:
        - !Ref 'ILBSubnet1'
        - !Ref 'ILBSubnet2'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - attachment
      TransitGatewayId: !Ref 'TGWID'
      VpcId: !Ref 'VPC'
  AssociateTGWAttachment:
    Type: AWS::EC2::TransitGatewayRouteTableAssociation
    Properties:
      TransitGatewayAttachmentId: !Ref 'TGWAttachment'
      TransitGatewayRouteTableId: !Ref 'SpokeVPCRouteTable'
  PropagateTGWRouteTableID:
    Type: AWS::EC2::TransitGatewayRouteTablePropagation
    Properties:
      TransitGatewayAttachmentId: !Ref 'TGWAttachment'
      TransitGatewayRouteTableId: !Ref 'SecurityHubRouteTable'
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref 'VPCCIDR'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: MGMT
        - Key: Name
          Value: !Ref 'VPCName'
  ILBSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - '0'
        - !Ref 'VpcAzs'
      VpcId: !Ref 'VPC'
      CidrBlock: !Select
        - '0'
        - !Ref 'VPCSubnetCIDRs'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: ILB and Web
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - ILB Subnet
    DependsOn:
      - VPC
  ILBSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - '1'
        - !Ref 'VpcAzs'
      VpcId: !Ref 'VPC'
      CidrBlock: !Select
        - '1'
        - !Ref 'VPCSubnetCIDRs'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: ILB and Web
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - ILB Subnet
    DependsOn:
      - VPC
  ILBSubnet3:
    Type: AWS::EC2::Subnet
    Condition: CreateSubnet3more
    Properties:
      AvailabilityZone: !Select
        - '2'
        - !Ref 'VpcAzs'
      VpcId: !Ref 'VPC'
      CidrBlock: !Select
        - '2'
        - !Ref 'VPCSubnetCIDRs'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: ILB and Web
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - ILB Subnet
    DependsOn:
      - VPC
  ILBSubnet4:
    Type: AWS::EC2::Subnet
    Condition: CreateSubnet4
    Properties:
      AvailabilityZone: !Select
        - '3'
        - !Ref 'VpcAzs'
      VpcId: !Ref 'VPC'
      CidrBlock: !Select
        - '3'
        - !Ref 'VPCSubnetCIDRs'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: ILB and Web
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - ILB Subnet
    DependsOn:
      - VPC


  ILBRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - ILBRouteTable
    DependsOn:
      - VPC
  ILBRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'ILBSubnet1'
      RouteTableId: !Ref 'ILBRouteTable'
    DependsOn:
      - ILBSubnet1
      - ILBRouteTable
  ILBRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'ILBSubnet2'
      RouteTableId: !Ref 'ILBRouteTable'
    DependsOn:
      - ILBSubnet2
      - ILBRouteTable
  ILBRouteTableAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateSubnet3more
    Properties:
      SubnetId: !Ref 'ILBSubnet3'
      RouteTableId: !Ref 'ILBRouteTable'
    DependsOn:
      - ILBSubnet3
      - ILBRouteTable
  ILBRouteTableAssociation4:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateSubnet4
    Properties:
      SubnetId: !Ref 'ILBSubnet4'
      RouteTableId: !Ref 'ILBRouteTable'
    DependsOn:
      - ILBSubnet4
      - ILBRouteTable
  ILBSecurityGroup2fwaz:
    Type: AWS::EC2::SecurityGroup
    Condition: FwAz2
    Properties:
      GroupDescription: Internal Load Balancer Security Group with HTTP access on
        port 80 from for firewall template with 2 Az
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - ILBSecurityGroup2fwaz
      SecurityGroupIngress:
        - IpProtocol: '-1'
          FromPort: '80'
          ToPort: '80'
          CidrIp: !Select
            - '0'
            - !Ref 'PeerConnectionTargetCIDRs'
        - IpProtocol: '-1'
          FromPort: '80'
          ToPort: '80'
          CidrIp: !Select
            - '1'
            - !Ref 'PeerConnectionTargetCIDRs'
  ILBSecurityGroup3fwaz:
    Type: AWS::EC2::SecurityGroup
    Condition: FwAz3
    Properties:
      GroupDescription: Internal Load Balancer Security Group with HTTP access on
        port 80 from for firewall template with 3 Az
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - ILBSecurityGroup3fwaz
      SecurityGroupIngress:
        - IpProtocol: '-1'
          FromPort: '80'
          ToPort: '80'
          CidrIp: !Select
            - '0'
            - !Ref 'PeerConnectionTargetCIDRs'
        - IpProtocol: '-1'
          FromPort: '80'
          ToPort: '80'
          CidrIp: !Select
            - '1'
            - !Ref 'PeerConnectionTargetCIDRs'
        - IpProtocol: '-1'
          FromPort: '80'
          ToPort: '80'
          CidrIp: !Select
            - '2'
            - !Ref 'PeerConnectionTargetCIDRs'
  ILBSecurityGroup4fwaz:
    Type: AWS::EC2::SecurityGroup
    Condition: FwAz4
    Properties:
      GroupDescription: Internal Load Balancer Security Group with HTTP access on
        port 80 from for firewall template with 4 Az
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - ILBSecurityGroup4fwaz
      SecurityGroupIngress:
        - IpProtocol: '-1'
          FromPort: '80'
          ToPort: '80'
          CidrIp: !Select
            - '0'
            - !Ref 'PeerConnectionTargetCIDRs'
        - IpProtocol: '-1'
          FromPort: '80'
          ToPort: '80'
          CidrIp: !Select
            - '1'
            - !Ref 'PeerConnectionTargetCIDRs'
        - IpProtocol: '-1'
          FromPort: '80'
          ToPort: '80'
          CidrIp: !Select
            - '2'
            - !Ref 'PeerConnectionTargetCIDRs'
        - IpProtocol: '-1'
          FromPort: '80'
          ToPort: '80'
          CidrIp: !Select
            - '3'
            - !Ref 'PeerConnectionTargetCIDRs'
  InternalLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Ref 'ILBName'
      Subnets: !If
        - CreateSubnet2
        - - !Ref 'ILBSubnet1'
          - !Ref 'ILBSubnet2'
        - !If
          - CreateSubnet3
          - - !Ref 'ILBSubnet1'
            - !Ref 'ILBSubnet2'
            - !Ref 'ILBSubnet3'
          - - !Ref 'ILBSubnet1'
            - !Ref 'ILBSubnet2'
            - !Ref 'ILBSubnet3'
            - !Ref 'ILBSubnet4'
      Scheme: internal
      Type: !FindInMap
        - Constants
        - ILB
        - Type
      SecurityGroups:
        - !If
          - FwAz2
          - !Ref 'ILBSecurityGroup2fwaz'
          - !If
            - FwAz3
            - !Ref 'ILBSecurityGroup3fwaz'
            - !Ref 'ILBSecurityGroup4fwaz'
  WebServerLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      Comment: Install a simple application
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              httpd: []
          files:
            /var/www/html/index.html:
              content: !Join
                - "\n"
                - - <img src="https://www.paloaltonetworks.com/content/dam/pan/en_US/images/logos/brand/pan-logo-badge-blue-medium-kick-up.png"
                    alt="VM-Series CloudFormation" width="200"/>
                  - '<h1>Congratulations, you have successfully launched VM-Series
                    ASG CloudFormation. This file is coming from Webserver Region:'
                  - !Ref 'AWS::Region'
                  - </h1>
                  - '<h1>StackID: '
                  - !Ref 'AWS::StackId'
                  - </h1>
                  - '<h1>StackName: '
                  - !Ref 'AWS::StackName'
                  - </h1>
                  - '<h1>AccountID: '
                  - !Ref 'AWS::AccountId'
                  - </h1>
                  - <h1>This templates creates - VPC, Subnets, Route Tables, Webservers
                    ASG, Lambda Infra </h1>
              mode: '000644'
              owner: root
              group: root
            /etc/cfn/cfn-hup.conf:
              content: !Join
                - ''
                - - "[main]\n"
                  - stack=
                  - !Ref 'AWS::StackId'
                  - "\n"
                  - region=
                  - !Ref 'AWS::Region'
                  - "\n"
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Join
                - ''
                - - "[cfn-auto-reloader-hook]\n"
                  - "triggers=post.update\n"
                  - "path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init\n"
                  - 'action=/opt/aws/bin/cfn-init -v '
                  - '         --stack '
                  - !Ref 'AWS::StackName'
                  - '         --resource LaunchConfig '
                  - '         --region '
                  - !Ref 'AWS::Region'
                  - "\n"
                  - "runas=root\n"
          services:
            sysvinit:
              httpd:
                enabled: 'true'
                ensureRunning: 'true'
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
    Properties:
      KeyName: !Ref 'KeyName'
      AssociatePublicIpAddress: 'true'
      ImageId: !FindInMap
        - AWSRegionArch2AMI
        - !Ref 'AWS::Region'
        - !FindInMap
          - AWSInstanceType2Arch
          - !Ref 'InstanceType'
          - Arch
      InstanceType: !Ref 'InstanceType'
      SecurityGroups:
        - !Ref 'WebServerSecurityGroup'
      UserData: !Base64
        Fn::Join:
          - ''
          - - "#!/bin/bash -xe\n"
            - "yum update -y aws-cfn-bootstrap\n"
            - '/opt/aws/bin/cfn-init -v '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource WebServerLaunchConfig'
            - '         --region '
            - !Ref 'AWS::Region'
            - "\n"
            - "# Signal completion\n"
            - '/opt/aws/bin/cfn-signal -e $? '
            - '  --stack '
            - !Ref 'AWS::StackName'
            - '  --resource WebServerGroup'
            - '  --region '
            - !Ref 'AWS::Region'
            - "\n"
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref 'VPC'
      GroupDescription: Allow access from HTTP and SSH traffic
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - WebServerSecurityGroup
      SecurityGroupIngress:
        - IpProtocol: '-1'
          FromPort: '-1'
          ToPort: '-1'
          CidrIp: !Ref 'SSHLocation'
        - IpProtocol: '-1'
          FromPort: '-1'
          ToPort: '-1'
          CidrIp: !Ref 'VPCCIDR'
  WebServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
      - WebServerLaunchConfig
    Properties:
      AvailabilityZones: !If
        - CreateSubnet2
        - - !Select
            - '0'
            - !Ref 'VpcAzs'
          - !Select
            - '1'
            - !Ref 'VpcAzs'
        - !If
          - CreateSubnet3
          - - !Select
              - '0'
              - !Ref 'VpcAzs'
            - !Select
              - '1'
              - !Ref 'VpcAzs'
            - !Select
              - '2'
              - !Ref 'VpcAzs'
          - - !Select
              - '0'
              - !Ref 'VpcAzs'
            - !Select
              - '1'
              - !Ref 'VpcAzs'
            - !Select
              - '2'
              - !Ref 'VpcAzs'
            - !Select
              - '3'
              - !Ref 'VpcAzs'
      LaunchConfigurationName: !Ref 'WebServerLaunchConfig'
      MinSize: '2'
      MaxSize: '6'
      TargetGroupARNs:
        - !Ref 'WebServerTargetGroup'
      VPCZoneIdentifier: !If
        - CreateSubnet2
        - - !Ref 'ILBSubnet1'
          - !Ref 'ILBSubnet2'
        - !If
          - CreateSubnet3
          - - !Ref 'ILBSubnet1'
            - !Ref 'ILBSubnet2'
            - !Ref 'ILBSubnet3'
          - - !Ref 'ILBSubnet1'
            - !Ref 'ILBSubnet2'
            - !Ref 'ILBSubnet3'
            - !Ref 'ILBSubnet4'
      Tags:
        - ResourceType: auto-scaling-group
          ResourceId: WebServerGroup
          PropagateAtLaunch: true
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - WebServerGroup
          Key: Name
  WebServerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: '80'
      Protocol: HTTP
      UnhealthyThresholdCount: '3'
      VpcId: !Ref 'VPC'
  WebServerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref 'WebServerTargetGroup'
      LoadBalancerArn: !Ref 'InternalLoadBalancer'
      Port: '80'
      Protocol: HTTP
    DependsOn:
      - WebServerTargetGroup
      - InternalLoadBalancer
  SetTransitGatewayIdRoute:
    Type: AWS::CloudFormation::CustomResource
    DependsOn:
      - ILBRouteTable
    Properties:
      ServiceToken: !GetAtt 'TransitGatewayInitialiseLambda.Arn'
      routes_to_add:
        Ref: "VpcSummaryRoute"
      route_tables:
        - Ref: "ILBRouteTable"

  ASLambdalayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:
        - python3.6
        - python3.7
      Content:
        S3Bucket: !Ref 'S3BucketName'
        S3Key: layer.zip
      Description: Autoscale Layer
      LayerName: as-layer
      LicenseInfo: MIT
  TransitGatewayInitialiseLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Start the step function to initialise firewall
      Handler: setRouteTablelambda.lambda_handler
      Role: !GetAtt 'LambdaExecutionRole0.Arn'
      Layers:
        - !Ref 'ASLambdalayer'
      Code:
        S3Bucket: !Ref 'S3BucketName'
        S3Key: !Ref 'LambdaZipFileName'
      Environment:
        Variables:
          transitGatewayid: !Ref 'TGWID'
          region: !Ref 'AWS::Region'
          VpcSummaryRoute: !Ref 'VpcSummaryRoute'
      Runtime: python3.6
      Timeout: 150
    DependsOn:
      - ILBRouteTable
      - TGWAttachment
  LambdaExecutionRole0:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: LambdaExecutionRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sts:AssumeRole
                Resource:
                  - '*'
              - Effect: Allow
                Action: s3:ListBucket
                Resource: !Join
                  - ''
                  - - 'arn:aws:s3:::'
                    - !Ref 'S3BucketName'
                    - /*
              - Effect: Allow
                Action: s3:GetObject
                Resource: !Join
                  - ''
                  - - 'arn:aws:s3:::'
                    - !Ref 'S3BucketName'
                    - /*
              - Effect: Allow
                Action:
                  - ec2:DescribeSubnets
                  - ec2:CreateRoute
                  - ec2:DeleteRoute
                  - ec2:DescribeVpcs
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - events:*
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - cloudwatch:*
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                  - lambda:ListLayerVersions
                  - lambda:ListLayers
                  - lambda:AddPermission
                  - lambda:CreateEventSourceMapping
                  - lambda:CreateFunction
                  - lambda:DeleteEventSourceMapping
                  - lambda:DeleteFunction
                  - lambda:GetEventSourceMapping
                  - lambda:ListEventSourceMappings
                  - lambda:RemovePermission
                  - lambda:UpdateEventSourceMapping
                  - lambda:UpdateFunctionCode
                  - lambda:UpdateFunctionConfiguration
                  - lambda:GetFunction
                  - lambda:ListFunctions
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:SendMessage
                  - sqs:SetQueueAttributes
                  - sqs:PurgeQueue
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - elasticloadbalancing:AddTags
                  - elasticloadbalancing:AttachLoadBalancerToSubnets
                  - elasticloadbalancing:ConfigureHealthCheck
                  - elasticloadbalancing:DescribeInstanceHealth
                  - elasticloadbalancing:DescribeLoadBalancerAttributes
                  - elasticloadbalancing:DescribeLoadBalancerPolicyTypes
                  - elasticloadbalancing:DescribeLoadBalancerPolicies
                  - elasticloadbalancing:DescribeLoadBalancers
                  - elasticloadbalancing:DescribeTags
                  - elasticloadbalancing:DetachLoadBalancerFromSubnets
                  - elasticloadbalancing:ModifyLoadBalancerAttributes
                  - elasticloadbalancing:RemoveTags
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - iam:PassRole
                  - iam:GetRole
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutDestination
                  - logs:PutDestinationPolicy
                  - logs:PutLogEvents
                  - logs:PutMetricFilter
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - dynamodb:CreateTable
                  - dynamodb:DeleteItem
                  - dynamodb:DeleteTable
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                Resource:
                  - '*'
  ILBDeployerLambda0:
    Type: AWS::Lambda::Function
    Properties:
      Handler: ilb_deployer.ilb_deploy_handler
      Role: !GetAtt 'LambdaExecutionRole0.Arn'
      Code:
        S3Bucket: !Ref 'S3BucketName'
        S3Key: !Ref 'LambdaZipFileName'
      Runtime: python2.7
      Timeout: '300'
    DependsOn:
      - InternalLoadBalancer
      - WebServerLaunchConfig
      - WebServerListener
  LambdaCustomResource0:
    Type: AWS::CloudFormation::CustomResource
    Version: '1.0'
    DependsOn:
      - ILBDeployerLambda0
    Properties:
      ServiceToken: !GetAtt 'ILBDeployerLambda0.Arn'
      StackName: !Ref 'AWS::StackName'
      Region: !Ref 'AWS::Region'
      ILB-TYPE: !FindInMap
        - Constants
        - ILB
        - Type
      ILB-ARN: !Ref 'InternalLoadBalancer'
      ILB-NAME: !Ref 'ILBName'
      TGWConnected: !Ref 'TGWID'
      ILB-DNS: !GetAtt 'InternalLoadBalancer.DNSName'
      NumberOfFWAZs: !Ref 'NumberOfFWAZs'
      NumberOfAZs: !Ref 'NumberOfAZs'
      VpcAzs: !Ref 'VpcAzs'
      VPCSubnetCIDRs: !Ref 'VPCSubnetCIDRs'
      LambdaExecutionRole: !Ref 'LambdaExecutionRole0'
      CrossAccountRoleARN: !Ref 'CrossAccountRole'
      S3BucketName: !Ref 'S3BucketName'
      S3ObjectName: !Ref 'LambdaZipFileName'
      QueueURL: !Ref 'QueueURL'
