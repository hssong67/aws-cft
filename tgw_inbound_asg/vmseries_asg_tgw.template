{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Description" : "Creates VPC, Route Tables, SG, Application ELB, VM-Series, Autoscale Group, and Lambda infrastructure firewall",
  "Parameters" : {
    "VPCName" : {
      "Description" : "Name of the VM-Series VPC",
      "Type" : "String",
      "MinLength": "6",
      "MaxLength": "24",
      "Default" : "security-in"
    },
    "KeyPANWFirewall": {
      "Type" : "String",
      "Description": "API key of VM-Series user. Default: pandemo/demopassword",
      "Default": "LUFRPT1Zd2pYUGpkMUNrVEZlb3hROEQyUm95dXNGRkU9N0d4RGpTN2VZaVZYMVVoS253U0p6dlk3MkM0SDFySEh2UUR4Y3hzK2g3ST0=",
      "AllowedPattern": "[\\S0-9a-zA-Z]+",
      "ConstraintDescription" : "The PAN FW API key is required.",
      "NoEcho" : "true"
    },
    "KeyPANWPanorama": {
      "Type" : "String",
      "Description": "API key associated with Panorama user",
      "NoEcho" : "true"
    },
    "KeyDeLicense": {
    	"Type": "String",
    	"Description": "API key to delicense: https://docs.paloaltonetworks.com/pan-os/8-0/pan-os-new-features/virtualization-features/vm-series-license-deactivation-api-key",
    	"NoEcho" : "true"
    },
    "BootstrapS3Bucket": {
      "Type" : "String",
      "Default": "panw-aws-autoscale-v20",
      "Description": "Name of the S3 bucket to bootstrap the VM-Series",
      "MinLength" : "3",
      "MaxLength" : "63"
    },
    "PanFwAmiId": {
      "Type": "AWS::EC2::Image::Id",
      "Default": "",
      "Description": "AMI List: https://www.paloaltonetworks.com/documentation/global/compatibility-matrix/vm-series-firewalls/aws-cft-amazon-machine-images-ami-list"
    },
    "ELBName": {
      "Type" : "String",
      "Description": "Name of the external Application Load Balancer",
      "Default": "vmseries-alb",
      "MinLength" : "3",
      "MaxLength" : "12"
    },
    "KeyName" : {
       "Description" : "EC2 Key Pair",
       "Type" : "AWS::EC2::KeyPair::KeyName"
    },
    "SSHLocation" : {
      "Description" : "Source address to restrict access to the VM-Series (enter a valid CIDR range in the format of x.x.x.x/x)",
      "Type" : "String",
      "Default": "0.0.0.0/0",
      "MinLength": "9",
      "MaxLength": "18",
      "AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription" : "must be a valid CIDR range in the format of x.x.x.x/x"
    },
    "VpcAzs": {
      "Type": "List<AWS::EC2::AvailabilityZone::Name>",
      "Description": "Select two availability zones for VPC's subnetworks"
    },
    "LambdaS3Bucket": {
      "Type" : "String",
      "Description": "Name of the S3 Bucket that contains Lambda scripts and CFTs",
      "Default": "panw-aws-autoscale-v20",
      "MinLength" : "3",
      "MaxLength" : "63"
    },
    "TGWID": {
      "Type" : "String",
      "Default": "tgw-",
      "Description": "Transit Gateway resource ID (i.e. tgw-xxxxxx)",
      "AllowedPattern" : ".+"
    },
    "AssociatedTGWRouteTableID": {
      "Type" : "String",
      "Default": "tgw-rtb-",
      "Description": "Transit Gateway Route Table to associate with the VM-Series VPC attachment (i.e. tgw-rtb-xxxxxx)",
      "AllowedPattern" : ".+"
    },
    "PropagatedTGWRouteTableID": {
        "Type" : "String",
        "Default": "tgw-rtb-",
        "Description": "Transit Gateway route table resource ID to propagate the VM-Series VPC attachment (i.e. tgw-rtb-xxxxxx)",
        "AllowedPattern" : ".+"
    },
    "Debug": {
      "Type": "String",
      "Default": "No",
      "AllowedValues": [
        "Yes",
        "No"
      ]
    }        
  },
  "Mappings": {
    "BucketRegionMap" : {
      "BootstrapRegion"   : { "DefaultRegion": "panw-aws-autoscale-v20" },
      "LambdaRegion"      : { "DefaultRegion": "panw-aws-autoscale-v20" }
    },
    "KeyMap" : {
      "Key"     : { "Key": "panw-aws.zip" }
    },
    "CidrBlockMap"            : {
      "VpcCidrBlock"       : { "CidrBlock": "10.255.0.0/16" },
      "MgmtCidrBlock"      : { "CidrBlockAz1": "10.255.0.0/28", "CidrBlockAz2": "10.255.0.16/28" },
      "UntrustCidrBlock"   : { "CidrBlockAz1": "10.255.1.0/28", "CidrBlockAz2": "10.255.1.16/28" },
      "TrustCidrBlock"     : { "CidrBlockAz1": "10.255.2.0/28", "CidrBlockAz2": "10.255.2.16/28" },
      "TGWCidrBlock"       : { "CidrBlockAz1": "10.255.3.0/28", "CidrBlockAz2": "10.255.3.16/28" },
      "NatGwCidrBlock"     : { "CidrBlockAz1": "10.255.4.0/28", "CidrBlockAz2": "10.255.4.16/28" },
      "LambdaCidrBlock"    : { "CidrBlockAz1": "10.255.5.0/28", "CidrBlockAz2": "10.255.5.16/28" }
    },
    "FWInstanceTypeMap" : {
      "TypeM4"            : { "M4xlarge": "m4.xlarge", "M44xlarge": "m4.4xlarge" },
      "TypeM3"            : { "M3xlarge": "m3.xlarge", "M32xlarge": "m3.2xlarge" },
      "TypeC4"            : { "C4xlarge": "c4.xlarge", "C42xlarge": "c4.2xlarge", "C44xlarge": "c4.4xlarge" },
      "TypeC3"            : { "C3xlarge": "c3.xlarge", "C32xlarge": "c3.2xlarge", "C34xlarge": "c3.4xlarge" }
    },
    "ASGScaleMap" : {
      "MinInstances"        : { "ASG": "1" },
      "MaxInstances"        : { "ASG": "5" },
      "ScaleUpThreshold"    : {"ASG": "80" },
      "ScaleDownThreshold"  : {"ASG": "20" },
      "ScalingParam"        : {"CPU": "DataPlaneCPUUtilizationPct", "AS": "panSessionActive", "SU": "panSessionUtilization", "SSPU":"panSessionSslProxyUtilization", "GPU": "panGPGatewayUtilizationPct", "GPAT": "panGPGWUtilizationActiveTunnels", "DPB": "DataPlanePacketBufferUtilization"},
      "ScalingPeriod"        : {"ASG": "900" }
    }
  },
  "Conditions" : {
    "PANWBootstrap" : {"Fn::Equals" : [ {"Ref": "BootstrapS3Bucket" }, { "Fn::FindInMap" : [ "BucketRegionMap", "BootstrapRegion", "DefaultRegion" ]}]},    
    "PANWScript" : {"Fn::Equals" : [ {"Ref": "LambdaS3Bucket" }, { "Fn::FindInMap" : [ "BucketRegionMap", "LambdaRegion", "DefaultRegion" ]}]}    
  },
  "Metadata" : {
    "AWS::CloudFormation::Interface" : {
      "ParameterGroups" : [
      {
        "Label" : {"default": "VPC Parameters"},
        "Parameters" : ["VPCName", "VpcAzs", "ELBName"]
      },
      {
        "Label" : {"default": "VM-Series Parameters"},
        "Parameters" : ["PanFwAmiId", "KeyName", "SSHLocation", "BootstrapS3Bucket" ]
      },
      {
        "Label" : {"default": "Lambda Parameters"},
        "Parameters" : [ "LambdaS3Bucket", "KeyPANWFirewall", "KeyPANWPanorama", "KeyDeLicense", "Debug"]
      },
      {
        "Label" : {"default": "Transit Gateway Parameters"},
        "Parameters" : ["TGWID", "AssociatedTGWRouteTableID", "PropagatedTGWRouteTableID"]
      }
      ],
      "ParameterLabels" : {
        "PanFwAmiId": {"default": "VM-Series AMI"},
        "VPCName": {"default": "VPC Name"},
        "KeyName": {"default": "Key Pair"},
        "SSHLocation": {"default": "Security Group Source Prefix"},
        "BootstrapS3Bucket": {"default": "Bootstrap Bucket"},
        "LambdaS3Bucket": {"default": "Lambda Bucket"},
        "KeyPANWFirewall": {"default": "API Key - Firewall"},
        "KeyPANWPanorama": {"default": "API Key - Panorama"},
        "KeyDeLicense": {"default": "API Key - Delicense"},
        "ELBName": {"default": "ALB Name:"},
        "VpcAzs": {"default": "Availability Zones (max 2)"},
        "AZSubnetIDUntrust": {"default": "Subnet ID of Untrust Interface"},
        "AZSubnetIDTrust": {"default": "Subnet ID of Trust Interface"},  
        "TGWID": {"default": "Transit Gateway ID:"},
        "AssociatedTGWRouteTableID": {"default": "Transit Gateway Route Table - TO ASSOCIATE"},
        "PropagatedTGWRouteTableID": {"default": "Transit Gateway Route Table - TO PROPAGATE"},
        "Debug": {"default": "Enable Debugging"}
      }                 
    }                   
  },
  "Resources" : {
    "VPC" : {
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
        "CidrBlock" : { "Fn::FindInMap" : [ "CidrBlockMap", "VpcCidrBlock", "CidrBlock" ] },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
          { "Key" : "Network", "Value" : "MGMT" },
          { "Key" : "Name", "Value": {"Ref": "VPCName"} }
        ]
      }
    },
    "LambdaSubnetAz1" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "AvailabilityZone" : { "Fn::Select" : [ "0", {"Ref" : "VpcAzs"} ] },
        "MapPublicIpOnLaunch": true,
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : { "Fn::FindInMap" : [ "CidrBlockMap", "LambdaCidrBlock", "CidrBlockAz1" ] },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
          { "Key" : "Network", "Value" : "LambdaFunction" },
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" },  "lambda-az1" ] ] }}
        ]
      },
      "DependsOn": [ "VPC" ]
    },
    "LambdaSubnetAz2" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "AvailabilityZone" : { "Fn::Select" : [ "1", {"Ref" : "VpcAzs"} ] },
        "MapPublicIpOnLaunch": true,
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : { "Fn::FindInMap" : [ "CidrBlockMap", "LambdaCidrBlock", "CidrBlockAz2" ] },
         "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
          { "Key" : "Network", "Value" : "LambdaFunction" },
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" },  "lambda-az2" ] ] }}
        ]
      },
      "DependsOn": [ "VPC" ]
    },
    "LambdaRouteTableAz1" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
          { "Key" : "Name", "Value": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" },  "lambda-rtb-az1" ] ] }}
        ]
      },
      "DependsOn": [ "VPC" ]
    },
    "LambdaRouteTableAz2" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
          { "Key" : "Name", "Value": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" },  "lambda-rtb-az2" ] ] }}
        ]
      },
      "DependsOn": [ "VPC" ]
    },
    "NATGWSubnetAz1" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "AvailabilityZone" : { "Fn::Select" : [ "0", {"Ref" : "VpcAzs"} ] },
        "MapPublicIpOnLaunch": true,
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : { "Fn::FindInMap" : [ "CidrBlockMap", "NatGwCidrBlock", "CidrBlockAz1" ] },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
          { "Key" : "Network", "Value" : "NATGW" },
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" },  "natgw-az1" ] ] }}
        ]
      },
      "DependsOn": [ "VPC" ]
    },
    "NATGWSubnetAz2" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "AvailabilityZone" : { "Fn::Select" : [ "1", {"Ref" : "VpcAzs"} ] },
        "MapPublicIpOnLaunch": true,
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : { "Fn::FindInMap" : [ "CidrBlockMap", "NatGwCidrBlock", "CidrBlockAz2" ] },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
          { "Key" : "Network", "Value" : "NATGW" },
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" },  "natgw-az2" ] ] }}
        ]
      },
      "DependsOn": [ "VPC" ]
    },

    
    "TGWSubnetAz1" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "AvailabilityZone" : { "Fn::Select" : [ "0", {"Ref" : "VpcAzs"} ] },
        "MapPublicIpOnLaunch": false,
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : { "Fn::FindInMap" : [ "CidrBlockMap", "TGWCidrBlock", "CidrBlockAz1" ] },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
          { "Key" : "Network", "Value" : "TGW" },
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" },  "tgw-az1" ] ] }}
        ]
      },
      "DependsOn": [ "VPC" ]
    },

    "TGWSubnetAz2" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "AvailabilityZone" : { "Fn::Select" : [ "1", {"Ref" : "VpcAzs"} ] },
        "MapPublicIpOnLaunch": false,
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : { "Fn::FindInMap" : [ "CidrBlockMap", "TGWCidrBlock", "CidrBlockAz2" ] },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
          { "Key" : "Network", "Value" : "TGW" },
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" },  "tgw-az2" ] ] }}
        ]
      },
      "DependsOn": [ "VPC" ]
    },


    "TGWAttachment" : {
      "Type" : "AWS::EC2::TransitGatewayAttachment",
      "Properties" : {
          "SubnetIds" : [{ "Ref" : "TGWSubnetAz1" }, { "Ref" : "TGWSubnetAz2" }],
          "Tags" : [ 
            { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" },  "attachment" ] ] }}
          ],
          "TransitGatewayId" : { "Ref" : "TGWID" },
          "VpcId" : { "Ref" : "VPC" }
        }
    },


    "AssociateTGWAttachment" : {
      "Type" : "AWS::EC2::TransitGatewayRouteTableAssociation",
      "Properties" : {
          "TransitGatewayAttachmentId" : { "Ref" : "TGWAttachment" },
          "TransitGatewayRouteTableId" : { "Ref" : "AssociatedTGWRouteTableID" }
        }
    },

    "PropagateTGWRouteTableID" : {
      "Type" : "AWS::EC2::TransitGatewayRouteTablePropagation",
      "Properties" : {
          "TransitGatewayAttachmentId" : { "Ref" : "TGWAttachment" },
          "TransitGatewayRouteTableId" : { "Ref" : "PropagatedTGWRouteTableID" }
        }
    },
    
    
    "EIP1" : {
       "Type" : "AWS::EC2::EIP",
       "Properties" : {
          "Domain" : "VPC"
       },
       "DependsOn": [ "VPC", "GatewayToInternet", "InternetGateway" ]
    },
    "EIP2" : {
       "Type" : "AWS::EC2::EIP",
       "Properties" : {
          "Domain" : "VPC"
       },
       "DependsOn": [ "VPC", "GatewayToInternet", "InternetGateway" ]
    },
    "NAT1" : {
       "Type" : "AWS::EC2::NatGateway",
        "Properties" : {
          "AllocationId" : { "Fn::GetAtt" : ["EIP1", "AllocationId"]},
          "SubnetId" : { "Ref" : "NATGWSubnetAz1"}
       },
       "DependsOn" : [ "VPC", "EIP1", "NATGWSubnetAz1", "GatewayToInternet" ]
    },
    "NAT2" : {
       "Type" : "AWS::EC2::NatGateway",
        "Properties" : {
          "AllocationId" : { "Fn::GetAtt" : ["EIP2", "AllocationId"]},
          "SubnetId" : { "Ref" : "NATGWSubnetAz2"}
       },
       "DependsOn" : [ "VPC", "EIP2", "NATGWSubnetAz2", "GatewayToInternet" ]
    },
    "MGMTSubnetAz1" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "AvailabilityZone" : { "Fn::Select" : [ "0", {"Ref" : "VpcAzs"} ] },
        "MapPublicIpOnLaunch": true,
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : { "Fn::FindInMap" : [ "CidrBlockMap", "MgmtCidrBlock", "CidrBlockAz1" ] },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
          { "Key" : "Network", "Value" : "MGMT" },
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" },  "mgmt-az1" ] ] }}
        ]
      },
      "DependsOn": [ "VPC" ]
    },
    "MGMTSubnetAz2" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "AvailabilityZone" : { "Fn::Select" : [ "1", {"Ref" : "VpcAzs"} ] },
        "MapPublicIpOnLaunch": true,
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : { "Fn::FindInMap" : [ "CidrBlockMap", "MgmtCidrBlock", "CidrBlockAz2" ] },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
          { "Key" : "Network", "Value" : "MGMT" },
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" },  "mgmt-az2" ] ] }}
        ]
      },
      "DependsOn": [ "VPC" ]
    },
    "InternetGateway" : {
      "Type" : "AWS::EC2::InternetGateway",
      "Properties" : {
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
          { "Key" : "Network", "Value" : "MGMT" },
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" },  "igw" ] ] }}
        ]
      }
    },
    "GatewayToInternet" : {
       "Type" : "AWS::EC2::VPCGatewayAttachment",
       "Properties" : {
         "VpcId" : { "Ref" : "VPC" },
         "InternetGatewayId" : { "Ref" : "InternetGateway" }
       },
       "DependsOn": [ "InternetGateway" ]
    },
    "NATGWRouteTableAz1" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
          { "Key" : "Name", "Value": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" },  "natgw-rtb-az1" ] ] }}
        ]
      },
      "DependsOn": [ "VPC" ]
    },
    "NATGWRouteTableAz2" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
          { "Key" : "Name", "Value": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" },  "natgw-rtb-az2" ] ] }}
        ]
      },
      "DependsOn": [ "VPC" ]
    },
    "NATGWRoute1" : {
      "Type" : "AWS::EC2::Route",
      "Properties" : {
        "RouteTableId" : { "Ref" : "NATGWRouteTableAz1" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : { "Ref" : "InternetGateway" }
      },
      "DependsOn": [ "NATGWRouteTableAz1", "GatewayToInternet" ]
    },
    "NATGWRoute2" : {
      "Type" : "AWS::EC2::Route",
      "Properties" : {
        "RouteTableId" : { "Ref" : "NATGWRouteTableAz2" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : { "Ref" : "InternetGateway" }
      },
      "DependsOn": [ "NATGWRouteTableAz2", "GatewayToInternet" ]
    },
    "MGMTRouteTableAz1" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
          { "Key" : "Name", "Value": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" },  "mgmt-rtb-az1" ] ] }}
        ]
      },
      "DependsOn": [ "VPC" ]
    },
    "MGMTRouteTableAz2" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
          { "Key" : "Name", "Value": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" },  "mgmt-rtb-az2" ] ] }}
        ]
      },
      "DependsOn": [ "VPC" ]
    },
    "LambdaRoute1" : {
      "Type" : "AWS::EC2::Route",
      "Properties" : {
        "RouteTableId" : { "Ref" : "LambdaRouteTableAz1" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "NatGatewayId" : { "Ref" : "NAT1" }
      },
      "DependsOn": [ "NAT1" ]
    },
    "LambdaRoute2" : {
      "Type" : "AWS::EC2::Route",
      "Properties" : {
        "RouteTableId" : { "Ref" : "LambdaRouteTableAz2" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "NatGatewayId" : { "Ref" : "NAT2" }
      },
      "DependsOn": [ "NAT2" ]
    },
    "MGMTRouteNAT1" : {
      "Type" : "AWS::EC2::Route",
      "Properties" : {
        "RouteTableId" : { "Ref" : "MGMTRouteTableAz1" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "NatGatewayId" : { "Ref" : "NAT1" }
      },
      "DependsOn": [ "NAT1" ]
    },
    "MGMTRouteNAT2" : {
      "Type" : "AWS::EC2::Route",
      "Properties" : {
        "RouteTableId" : { "Ref" : "MGMTRouteTableAz2" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "NatGatewayId" : { "Ref" : "NAT2" }
      },
      "DependsOn": [ "NAT2" ]
    },
    "LambdaSubnetRouteTableAssociation1" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "LambdaSubnetAz1" },
        "RouteTableId" : { "Ref" : "LambdaRouteTableAz1" }
      },
      "DependsOn": [ "LambdaRouteTableAz1", "LambdaSubnetAz1" ]
    },
    "LambdaSubnetRouteTableAssociation2" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "LambdaSubnetAz2" },
        "RouteTableId" : { "Ref" : "LambdaRouteTableAz2" }
      },
      "DependsOn": [ "LambdaRouteTableAz2", "LambdaSubnetAz2" ]
    },
    "NAT1SubnetRouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "NATGWSubnetAz1" },
        "RouteTableId" : { "Ref" : "NATGWRouteTableAz1" }
      },
      "DependsOn": [ "NATGWRouteTableAz1", "NATGWSubnetAz1" ]
    },
    "NAT2SubnetRouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "NATGWSubnetAz2" },
        "RouteTableId" : { "Ref" : "NATGWRouteTableAz2" }
      },
      "DependsOn": [ "NATGWRouteTableAz2", "NATGWSubnetAz2" ]
    },
    "MGMTSubnetRouteTableAssociationNAT1" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "MGMTSubnetAz1" },
        "RouteTableId" : { "Ref" : "MGMTRouteTableAz1" }
      },
      "DependsOn": [ "MGMTRouteNAT1", "MGMTSubnetAz1" ]
    },
    "MGMTSubnetRouteTableAssociationNAT2" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "MGMTSubnetAz2" },
        "RouteTableId" : { "Ref" : "MGMTRouteTableAz2" }
      },
      "DependsOn": [ "MGMTSubnetAz2" ]
    },
    "UNTRUSTSubnet1" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "AvailabilityZone" : { "Fn::Select" : [ "0", {"Ref" : "VpcAzs"} ] },
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : { "Fn::FindInMap" : [ "CidrBlockMap", "UntrustCidrBlock", "CidrBlockAz1" ] },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
          { "Key" : "Network", "Value" : "UNTRUST" },
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" },  "untrust-az1" ] ] }}
        ]
      },
      "DependsOn": [ "VPC" ]
    },
    "UNTRUSTSubnet2" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "AvailabilityZone" : { "Fn::Select" : [ "1", {"Ref" : "VpcAzs"} ] },
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : { "Fn::FindInMap" : [ "CidrBlockMap", "UntrustCidrBlock", "CidrBlockAz2" ] },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
          { "Key" : "Network", "Value" : "UNTRUST" },
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" },  "untrust-az2" ] ] }}
        ]
      },
      "DependsOn": [ "VPC" ]
    },
    "UNTRUSTRouteTable" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
          { "Key" : "Network", "Value" : "UNTRUST" },
          { "Key" : "Name", "Value": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" },  "untrust-rtb" ] ] }}
        ]
      }
    },
    "UNTRUSTRoute" : {
      "Type" : "AWS::EC2::Route",
      "Properties" : {
        "RouteTableId" : { "Ref" : "UNTRUSTRouteTable" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : { "Ref" : "InternetGateway" }
      },
      "DependsOn": [ "GatewayToInternet", "UNTRUSTRouteTable" ]
    },
    "UNTRUSTSubnetRouteTableAssociation1" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "UNTRUSTSubnet1" },
        "RouteTableId" : { "Ref" : "UNTRUSTRouteTable" }
      },
      "DependsOn": [ "UNTRUSTRoute", "UNTRUSTSubnet1" ]
    },
    "UNTRUSTSubnetRouteTableAssociation2" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "UNTRUSTSubnet2" },
        "RouteTableId" : { "Ref" : "UNTRUSTRouteTable" }
      },
      "DependsOn": [ "UNTRUSTRoute", "UNTRUSTSubnet2" ]
    },
    "TRUSTSubnet1" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "AvailabilityZone" : { "Fn::Select" : [ "0", {"Ref" : "VpcAzs"} ] },
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : { "Fn::FindInMap" : [ "CidrBlockMap", "TrustCidrBlock", "CidrBlockAz1" ] },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
          { "Key" : "Network", "Value" : "TRUST" },
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" },  "trust-az1" ] ] }}
        ]
      },
      "DependsOn": [ "VPC", "InternetGateway" ]
    },
    "TRUSTSubnet2" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "AvailabilityZone" : { "Fn::Select" : [ "1", {"Ref" : "VpcAzs"} ] },
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : { "Fn::FindInMap" : [ "CidrBlockMap", "TrustCidrBlock", "CidrBlockAz2" ] },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
          { "Key" : "Network", "Value" : "TRUST" },
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" },  "trust-az2" ] ] }}
        ]
      } ,
      "DependsOn": [ "VPC", "InternetGateway" ]
    },
    "TrustRouteTableAz1" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
          { "Key" : "Network", "Value" : "TRUST" },
          { "Key" : "Name", "Value": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" },  "trust-rtb" ] ] }}
        ]
      },
      "DependsOn": [ "VPC" ]
    },

    "TrustRouteTGW1" : {
      "Type" : "AWS::EC2::Route",
      "Properties" : {
        "RouteTableId" : { "Ref" : "TrustRouteTableAz1" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "TransitGatewayId" : { "Ref" : "TGWID" }
      },
      "DependsOn": [ "TGWAttachment", "TrustRouteTableAz1" ]
    },

    "TRUSTSubnetRouteTableAssociation1" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "TRUSTSubnet1" },
        "RouteTableId" : { "Ref" : "TrustRouteTableAz1" }
      },
      "DependsOn": [ "TRUSTSubnet1" ]
    },
    "TRUSTSubnetRouteTableAssociation2" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "TRUSTSubnet2" },
        "RouteTableId" : { "Ref" : "TrustRouteTableAz1" }
      },
      "DependsOn": [ "TRUSTSubnet2" ]
    },
    "PublicLoadBalancerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Public ALB Security Group with HTTP access on port 80 from the internet",
        "VpcId" : { "Ref" : "VPC" },
        "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" },  "PublicLoadBalancerSecurityGroup" ] ] } } ],
        "SecurityGroupIngress" : [ { "IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0"} ],
        "SecurityGroupEgress" : [ { "IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "2000", "CidrIp" : "0.0.0.0/0"} ]
      },
      "DependsOn": [ "VPC" ]
    },
    "PublicLoadBanlancerListener": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "DefaultActions": [{
        "Type": "forward",
        "TargetGroupArn": { "Ref": "PublicLoadBalancerTargetGroup" }
      }],
      "LoadBalancerArn": { "Ref": "PublicLoadBalancer" },
        "Port": "80",
        "Protocol": "HTTP"
      }
    },    
    "PublicLoadBalancer" : {
      "Type" : "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties" : {
        "Name" : { "Ref" : "ELBName" },
        "SecurityGroups" : [ { "Ref" : "PublicLoadBalancerSecurityGroup" } ],
        "Subnets" : [ { "Ref" : "UNTRUSTSubnet1" }, { "Ref" : "UNTRUSTSubnet2" } ],
        "Scheme" : "internet-facing"
      },
      "DependsOn": [ "VPC", "GatewayToInternet", "PublicLoadBalancerSecurityGroup", "UNTRUSTSubnet1", "UNTRUSTSubnet2"]
    },
    "PublicLoadBalancerTargetGroup" : {
      "Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties" : {
        "HealthCheckIntervalSeconds" : 60,
        "UnhealthyThresholdCount" : 10,
        "HealthCheckProtocol" : "HTTP",
        "HealthCheckPort" : "81",
        "HealthCheckPath" : "/index.html",
        "Matcher" : {
            "HttpCode" : "200"
        },
        "Port" : 81,
        "Protocol" : "HTTP",
        "VpcId" : { "Ref": "VPC" }
      }
    },
    "NetworkLoadBalancerQueue": {
   		"Type" : "AWS::SQS::Queue",
        "DependsOn": [ "VPC" ]
	  },     
    "S3Endpoint2" : {
       "Type" : "AWS::EC2::VPCEndpoint",
       "Properties" : { 
       "PolicyDocument" : {
          "Version":"2012-10-17",
          "Statement":[
          {     
                "Effect": "Allow",
                "Principal": "*",
                "Action": "s3:ListBucket",
                "Resource": { "Fn::Join": [ "", [ "arn:aws:s3:::", { "Fn::If" : [ "PANWBootstrap", { "Fn::Join": [ "-", [ { "Fn::FindInMap" : [ "BucketRegionMap", "BootstrapRegion", "DefaultRegion" ]}, { "Ref": "AWS::Region" }]]}, { "Ref" : "BootstrapS3Bucket" }] } ] ] }
          },    
          {     
                "Effect": "Allow",
                "Principal": "*",
                "Action": "s3:GetObject", 
                "Resource": { "Fn::Join": [ "", [ "arn:aws:s3:::", { "Fn::If" : [ "PANWBootstrap", { "Fn::Join": [ "-", [ { "Fn::FindInMap" : [ "BucketRegionMap", "BootstrapRegion", "DefaultRegion" ]}, { "Ref": "AWS::Region" }]]}, { "Ref" : "BootstrapS3Bucket" }] }, "/*" ] ] }
          }
          ]
        },
        "RouteTableIds" : [ {"Ref" : "UNTRUSTRouteTable"}],
        "ServiceName" : { "Fn::Join": [ "", [ "com.amazonaws.", { "Ref": "AWS::Region" }, ".s3" ] ] },
        "VpcId" : {"Ref" : "VPC"}
     }
    },
    
    "FirewallBootstrapRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
            "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [ {
                    "Effect": "Allow",
                    "Principal": {
                        "Service": "ec2.amazonaws.com"
                    },
                "Action": "sts:AssumeRole"
                } ]
            },
            "Path":"/",
            "Policies": [ {
                "PolicyName" : "FirewallBootstrapRolePolicy",
                "PolicyDocument": {
                    "Version" : "2012-10-17",
                    "Statement": [{
                        "Effect": "Allow",
                        "Action": "s3:ListBucket",
                        "Resource": { "Fn::Join": [ "", [ "arn:aws:s3:::", { "Fn::If" : [ "PANWBootstrap", { "Fn::Join": [ "-", [ { "Fn::FindInMap" : [ "BucketRegionMap", "BootstrapRegion", "DefaultRegion" ]}, { "Ref": "AWS::Region" }]]}, { "Ref" : "BootstrapS3Bucket" }] }] ] }
                    },
                    {  
                        "Effect": "Allow",
                        "Action": "s3:GetObject",
                        "Resource": { "Fn::Join": [ "", [ "arn:aws:s3:::", { "Fn::If" : [ "PANWBootstrap", { "Fn::Join": [ "-", [ { "Fn::FindInMap" : [ "BucketRegionMap", "BootstrapRegion", "DefaultRegion" ]}, { "Ref": "AWS::Region" }]]}, { "Ref" : "BootstrapS3Bucket" }] }, "/*" ] ] }
                    },
                    {
                        "Effect": "Allow",
                        "Action": [
                          "cloudwatch:*"
                        ],
                        "Resource": [
                          "*"
                        ]
                    }]
                }
            }]
        }
    },  
    "FirewallBootstrapInstanceProfile":{
        "Type": "AWS::IAM::InstanceProfile",
        "Properties": {
          "Path": "/",
          "Roles": [ {
              "Ref": "FirewallBootstrapRole"
            }]
        },
        "DependsOn": [ "FirewallBootstrapRole" ]
    },
    "MgmtSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable SSH to MGMT interface",
        "VpcId" : { "Ref" : "VPC" },
        "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ "", [ { "Ref": "AWS::StackName" },  "MgmtSecurityGroup" ] ] } } ],
        "SecurityGroupIngress" : [ { "IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22",  "CidrIp" : { "Ref" : "SSHLocation" }},
				  { "IpProtocol" : "tcp", "FromPort" : "443",  "ToPort" : "443",  "CidrIp" : {"Ref" : "SSHLocation"}},
				  { "IpProtocol" : "-1", "FromPort" : "-1",  "ToPort" : "-1",  "CidrIp" : { "Fn::FindInMap" : [ "CidrBlockMap", "VpcCidrBlock", "CidrBlock" ] } },
				  { "IpProtocol" : "tcp", "FromPort" : "22",  "ToPort" : "22",  "CidrIp" : { "Fn::FindInMap" : [ "CidrBlockMap", "VpcCidrBlock", "CidrBlock" ] } }],
        "SecurityGroupEgress"  : [ { "IpProtocol" : "-1", "FromPort" : "-1",  "ToPort" : "-1",  "CidrIp" : "0.0.0.0/0" }]
      }
    },
    "UntrustSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Security Group for Untrust interface",
        "VpcId" : { "Ref" : "VPC" },
        "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ "", [ { "Ref": "AWS::StackName" },  "UntrustSecurityGroup" ] ] } } ],
        "SecurityGroupIngress" : [{
                "IpProtocol" : "-1",
                "FromPort" : "-1",
                "ToPort" : "-1",
                "CidrIp" : "0.0.0.0/0"
        }],
        "SecurityGroupEgress" : [{
             "IpProtocol" : "-1",
             "FromPort" : "-1",
             "ToPort" : "-1",
             "CidrIp" : "0.0.0.0/0"
        }]
      }
    },
    "TrustSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Security Group for trust interface",
        "VpcId" : { "Ref" : "VPC" },
        "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ "", [ { "Ref": "AWS::StackName" },  "TrustSecurityGroup" ] ] } } ],
        "SecurityGroupIngress" : [{
                "IpProtocol" : "-1",
                "FromPort" : "-1",
                "ToPort" : "-1",
                "CidrIp" : "0.0.0.0/0"
        }],
        "SecurityGroupEgress" : [{
             "IpProtocol" : "-1",
             "FromPort" : "-1",
             "ToPort" : "-1",
             "CidrIp" : "0.0.0.0/0"
        }]
      }
    },
    "VPCSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Security Group for within VPC",
        "VpcId" : { "Ref" : "VPC" },
        "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ "", [ { "Ref": "AWS::StackName" },  "VPCSecurityGroup" ] ] } } ],
        "SecurityGroupIngress" : [{
                "IpProtocol" : "-1",
                "FromPort" : "-1",
                "ToPort" : "-1",
                "CidrIp" : "0.0.0.0/0"
        }],
        "SecurityGroupEgress" : [{
             "IpProtocol" : "-1",
             "FromPort" : "-1",
             "ToPort" : "-1",
             "CidrIp" : "0.0.0.0/0"
        }]
      }
    },
    "LambdaExecutionRole" : {
        "Type": "AWS::IAM::Role",
        "Properties": {
            "AssumeRolePolicyDocument": {
               "Version": "2012-10-17",
               "Statement": [ {
                 "Effect": "Allow",
                 "Principal": {
                 "Service": "lambda.amazonaws.com"
                },
                "Action": "sts:AssumeRole"
              } ]
            },
            "Path":"/",
            "Policies": [ {
              "PolicyName": "LambdaExecutionRolePolicy",
              "PolicyDocument":{
                "Version": "2012-10-17",
                "Statement": [{
                    "Effect": "Allow",
                    "Action": "s3:ListBucket",
                    "Resource": { "Fn::Join": [ "", [ "arn:aws:s3:::", { "Fn::If" : [ "PANWBootstrap", { "Fn::Join": [ "-", [ { "Fn::FindInMap" : [ "BucketRegionMap", "BootstrapRegion", "DefaultRegion" ]}, { "Ref": "AWS::Region" }]]}, { "Ref" : "BootstrapS3Bucket" }] }, "/*" ] ] }
                },
                {  
                    "Effect": "Allow",
                    "Action": "s3:GetObject",
                    "Resource": { "Fn::Join": [ "", [ "arn:aws:s3:::", { "Fn::If" : [ "PANWBootstrap", { "Fn::Join": [ "-", [ { "Fn::FindInMap" : [ "BucketRegionMap", "BootstrapRegion", "DefaultRegion" ]}, { "Ref": "AWS::Region" }]]}, { "Ref" : "BootstrapS3Bucket" }] }, "/*" ] ] }
                },
                {
                        "Effect": "Allow",
                        "Action": "s3:ListBucket",
                        "Resource": { "Fn::Join": [ "", [ "arn:aws:s3:::", { "Fn::FindInMap" : [ "BucketRegionMap", "BootstrapRegion", "DefaultRegion" ]}, "-", { "Ref" : "AWS::Region" } ] ]}
                },
                {  
                        "Effect": "Allow",
                        "Action": "s3:GetObject",
                        "Resource": { "Fn::Join": [ "", [ "arn:aws:s3:::", { "Fn::FindInMap" : [ "BucketRegionMap", "BootstrapRegion", "DefaultRegion" ]}, "-", { "Ref" : "AWS::Region" }, "/*" ] ]}
                },
                {
                        "Effect": "Allow",
                        "Action": "s3:ListBucket",
                        "Resource": { "Fn::Join": [ "", [ "arn:aws:s3:::", { "Fn::If" : [ "PANWScript", { "Fn::Join": [ "-", [ "panw-aws-autoscale-v20", { "Ref": "AWS::Region" }]]}, { "Ref" : "LambdaS3Bucket" }] }] ] }
                },
                {  
                        "Effect": "Allow",
                        "Action": "s3:GetObject",
                        "Resource": { "Fn::Join": [ "", [ "arn:aws:s3:::", { "Fn::If" : [ "PANWScript", { "Fn::Join": [ "-", [ "panw-aws-autoscale-v20", { "Ref": "AWS::Region" }]]}, { "Ref" : "LambdaS3Bucket" }] }, "/*" ] ] }
                },
        {
            "Effect": "Allow",
            "Action": [
                "ec2:AllocateAddress",
                "ec2:AssociateAddress",
                "ec2:AssociateRouteTable",
                "ec2:AttachInternetGateway",
                "ec2:AttachNetworkInterface",
                "ec2:CreateNetworkInterface",
                "ec2:CreateTags",
                "ec2:DeleteNetworkInterface",
                "ec2:DeleteRouteTable",
                "ec2:DeleteSecurityGroup",
                "ec2:DeleteTags",
                "ec2:DescribeAddresses",
                "ec2:DescribeAvailabilityZones",
                "ec2:DescribeInstanceAttribute",
                "ec2:DescribeInstanceStatus",
                "ec2:DescribeInstances",
                "ec2:DescribeImages",
                "ec2:DescribeNatGateways",
                "ec2:DescribeNetworkInterfaceAttribute",
                "ec2:DescribeNetworkInterfaces",
                "ec2:DescribeTags",
                "ec2:DescribeVpcEndpoints",
                "ec2:DescribeVpcs",
                "ec2:DescribeSubnets",
                "ec2:DescribeSecurityGroups",
                "ec2:DetachInternetGateway",
                "ec2:DetachNetworkInterface",
                "ec2:DetachVolume",
                "ec2:DisassociateAddress",
                "ec2:DisassociateRouteTable",
                "ec2:ModifyNetworkInterfaceAttribute",
                "ec2:ModifySubnetAttribute",
                "ec2:MonitorInstances",
                "ec2:RebootInstances",
                "ec2:ReleaseAddress",
                "ec2:ReportInstanceStatus",
                "ec2:TerminateInstances",
                "ec2:DescribeIdFormat"
            ],
            "Resource": [
                "*"
            ]
        },
        {
            "Effect": "Allow",
            "Action": [
                "events:*"
            ],
            "Resource": [
                "*"
            ]
        },
        {
            "Effect": "Allow",
            "Action": [
                "cloudwatch:*"
            ],
            "Resource": [
                "*"
            ]
        },
        {
            "Effect": "Allow",
            "Action": [
                "lambda:AddPermission",
                "lambda:CreateEventSourceMapping",
                "lambda:CreateFunction",
                "lambda:DeleteEventSourceMapping",
                "lambda:DeleteFunction",
                "lambda:GetEventSourceMapping",
                "lambda:ListEventSourceMappings",
                "lambda:RemovePermission",
                "lambda:UpdateEventSourceMapping",
                "lambda:UpdateFunctionCode",
                "lambda:UpdateFunctionConfiguration",
                "lambda:GetFunction",
                "lambda:ListFunctions"
            ],
            "Resource": [
                "*"
            ]
        },
        {
            "Effect": "Allow",
            "Action": [
                "autoscaling:*"
            ],
            "Resource": [
                "*"
            ]
        },
        {
            "Effect": "Allow",
            "Action": [
                "sqs:ReceiveMessage",
                "sqs:SendMessage",
                "sqs:SetQueueAttributes",
                "sqs:PurgeQueue",
                "sqs:DeleteMessage"
            ],
            "Resource": [
                "*"
            ]
        },
        {
            "Effect": "Allow",
            "Action": [
                "elasticloadbalancing:AddTags",
                "elasticloadbalancing:AttachLoadBalancerToSubnets",
                "elasticloadbalancing:ConfigureHealthCheck",
                "elasticloadbalancing:DescribeInstanceHealth",
                "elasticloadbalancing:DescribeLoadBalancerAttributes",
                "elasticloadbalancing:DescribeLoadBalancerPolicyTypes",
                "elasticloadbalancing:DescribeLoadBalancerPolicies",
                "elasticloadbalancing:DescribeLoadBalancers",
                "elasticloadbalancing:DescribeTags",
                "elasticloadbalancing:DetachLoadBalancerFromSubnets",
                "elasticloadbalancing:ModifyLoadBalancerAttributes",
                "elasticloadbalancing:RemoveTags",
                "elasticloadbalancing:DescribeTargetGroups"
            ],
            "Resource": [
                "*"
            ]
        },
        {
            "Effect": "Allow",
            "Action": [
                "iam:PassRole",
                "iam:GetRole"
            ],
            "Resource": [
                "*"
            ]
        },
        {
          "Effect": "Allow",
          "Action": ["logs:CreateLogGroup","logs:CreateLogStream","logs:PutLogEvents"],
          "Resource": "arn:aws:logs:*:*:*"
        },
        {
          "Effect": "Allow",
          "Action": ["cloudformation:DescribeStacks"],
          "Resource": "*"
        },
        {
            "Effect": "Allow",
            "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutDestination",
                "logs:PutDestinationPolicy",
                "logs:PutLogEvents",
                "logs:PutMetricFilter"
            ],
            "Resource": [
                "*"
            ]
        },
        {
            "Effect": "Allow",
            "Action": "dynamodb:*",
            "Resource": "arn:aws:dynamodb:*:*:*"
        }
        ]
      }}]}
    },
    "FwInit" : {
        "Type": "AWS::Lambda::Function",
        "Properties": {
          "Handler": "fw_init.lambda_handler",
          "Role": { "Fn::GetAtt" : ["LambdaExecutionRole", "Arn"] },
          "Code": {
              "S3Bucket": { "Fn::If" : [ "PANWScript", { "Fn::Join": [ "-", [ "panw-aws-autoscale-v20", { "Ref": "AWS::Region" }]]}, { "Ref" : "LambdaS3Bucket" }] },
                "S3Key": { "Fn::FindInMap" : [ "KeyMap", "Key", "Key" ] }
          },
          "Runtime": "python2.7",
          "Timeout": "300",
          "VpcConfig": {
           	"SubnetIds": [{ "Ref" : "LambdaSubnetAz1" }, { "Ref" : "LambdaSubnetAz2" }],
          	"SecurityGroupIds":  [{"Ref": "VPCSecurityGroup"}]
          }
        },
        "DependsOn": [ "LambdaExecutionRole", "VPCSecurityGroup" ]
    },
    "LambdaENIQueue": {
   		"Type" : "AWS::SQS::Queue",
        "DependsOn": [ "InitLambda" ]
	  }, 
    "LambdaENISNSTopic" : {
        "Type" : "AWS::SNS::Topic",
        "Properties" : {
            "Subscription" : [ {
            "Endpoint" : { "Fn::GetAtt" : ["FwInit", "Arn"]},
            "Protocol" : "lambda"
            } ]
        },
        "DependsOn": [ "FwInit" ]
    },
    "LambdaENIPermission": {
        "Type" : "AWS::Lambda::Permission",
        "Properties" : {
            "Action" : "lambda:InvokeFunction",
            "FunctionName" : {"Fn::GetAtt" : ["FwInit", "Arn"]},
            "Principal" : "sns.amazonaws.com",
            "SourceArn" : {"Ref" : "LambdaENISNSTopic"}
        },
        "DependsOn": [ "FwInit", "LambdaENISNSTopic" ]
    },
    "ASGNotifierRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [ {
            "Effect": "Allow",
            "Principal": {
              "Service": [ "autoscaling.amazonaws.com" ]
            },
            "Action": [ "sts:AssumeRole" ]
          } ]
        },
        "Path": "/"
      }
    },
    "ASGNotifierRolePolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": { "Ref": "AWS::StackName" },
        "PolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [ {
            "Effect": "Allow",
            "Action": "sns:Publish",
            "Resource": { "Ref" : "LambdaENISNSTopic" }
          } ]
        },
        "Roles": [ { "Ref": "ASGNotifierRole" } ]
      },
      "DependsOn": [ "ASGNotifierRole", "LambdaENISNSTopic" ]
    },
    "InitLambda" : {
        "Type": "AWS::Lambda::Function",
        "Properties": {
            "Handler": "init.lambda_handler",
            "Role": { "Fn::GetAtt" : ["LambdaExecutionRole", "Arn"] },
            "Code": {
                "S3Bucket": { "Fn::If" : [ "PANWScript", { "Fn::Join": [ "-", [ "panw-aws-autoscale-v20", { "Ref": "AWS::Region" }]]}, { "Ref" : "LambdaS3Bucket" }] },
                "S3Key": { "Fn::FindInMap" : [ "KeyMap", "Key", "Key" ] }
            },
        "Runtime": "python2.7",
        "Timeout": "300"
      },
      "DependsOn": [ "LambdaExecutionRole"]
      },
    "LambdaCustomResource": {
        "Type": "AWS::CloudFormation::CustomResource",
        "Version" : "1.0",
        "DependsOn": [ "FwInit", "InitLambda", "TrustSecurityGroup",  "UntrustSecurityGroup", "MgmtSecurityGroup", "VPCSecurityGroup"],
         "Properties" : {
            "ServiceToken": { "Fn::GetAtt" : ["InitLambda", "Arn"] },
            "StackName": {"Ref": "AWS::StackName"},
            "Region": {"Ref": "AWS::Region"},
            "VpcId": {"Ref": "VPC"},
            "SubnetIDMgmt": { "Fn::Join": [ ",", [ { "Ref" : "MGMTSubnetAz1" }, { "Ref" : "MGMTSubnetAz2" } ] ] },
            "SubnetIDUntrust": { "Fn::Join": [ ",", [ { "Ref" : "UNTRUSTSubnet1" }, { "Ref" : "UNTRUSTSubnet2" } ] ] },
            "SubnetIDTrust": { "Fn::Join": [ ",", [ { "Ref" : "TRUSTSubnet1" }, { "Ref" : "TRUSTSubnet2" } ] ] },
            "MgmtSecurityGroup": {"Ref": "MgmtSecurityGroup"},
            "UntrustSecurityGroup": {"Ref": "UntrustSecurityGroup"},
            "TrustSecurityGroup": {"Ref": "TrustSecurityGroup"},
            "VPCSecurityGroup": {"Ref": "VPCSecurityGroup"},
	          "KeyName" : {"Ref": "KeyName"},
	          "ELBName" : {"Ref": "ELBName"},
	          "ELBTargetGroupName"  : {"Fn::Select": [1, {"Fn::Split": ["/", { "Fn::GetAtt": [ "PublicLoadBalancerTargetGroup",  "TargetGroupFullName" ] } ] } ] },
	          "FWInstanceType" : { "Fn::FindInMap" : [ "FWInstanceTypeMap", "TypeM4", "M4xlarge" ] },
	          "SSHLocation" : {"Ref": "SSHLocation"},
            "MinInstancesASG": { "Fn::FindInMap" : [ "ASGScaleMap", "MinInstances", "ASG" ] },	          
	          "MaximumInstancesASG" : { "Fn::FindInMap" : [ "ASGScaleMap", "MaxInstances", "ASG" ] },
	          "ScaleUpThreshold" : { "Fn::FindInMap" : [ "ASGScaleMap", "ScaleUpThreshold", "ASG" ] },
	          "ScaleDownThreshold" : { "Fn::FindInMap" : [ "ASGScaleMap", "ScaleDownThreshold", "ASG" ] },
	          "ScalingParameter" : { "Fn::FindInMap" : [ "ASGScaleMap", "ScalingParam", "CPU" ] },
	          "ScalingPeriod" : { "Fn::FindInMap" : [ "ASGScaleMap", "ScalingPeriod", "ASG" ] },
	          "ImageID" : { "Ref": "PanFwAmiId" },
            "LambdaENISNSTopic": {"Ref": "LambdaENISNSTopic"},
            "FirewallBootstrapRole": {"Ref": "FirewallBootstrapInstanceProfile"},
            "LambdaExecutionRole": {"Ref": "LambdaExecutionRole"},
            "ASGNotifierRole": { "Fn::GetAtt": [ "ASGNotifierRole", "Arn" ] },
            "ASGNotifierRolePolicy": {"Ref": "ASGNotifierRolePolicy"},
	          "BootstrapS3Bucket" : { "Fn::If" : [ "PANWBootstrap", { "Fn::Join": [ "-", [ { "Fn::FindInMap" : [ "BucketRegionMap", "BootstrapRegion", "DefaultRegion" ]}, { "Ref": "AWS::Region" }]]}, { "Ref" : "BootstrapS3Bucket" }] },
	          "LambdaS3Bucket" : { "Ref" : "LambdaS3Bucket" },
	          "PanS3KeyTpl" : { "Fn::FindInMap" : [ "KeyMap", "Key", "Key" ] },
	          "KeyPANWFirewall" : { "Ref" : "KeyPANWFirewall" },
	          "KeyPANWPanorama" : { "Ref" : "KeyPANWPanorama" },
            "SubnetIDNATGW": { "Fn::Join": [ ",", [ { "Ref" : "NATGWSubnetAz1" }, { "Ref" : "NATGWSubnetAz2" } ] ] },
            "SubnetIDLambda": { "Fn::Join": [ ",", [ { "Ref" : "LambdaSubnetAz1" }, { "Ref" : "LambdaSubnetAz2" } ] ]},
            "FwInit": {"Ref": "FwInit"},
            "InitLambda": {"Ref": "InitLambda"},
            "KeyDeLicense": { "Ref": "KeyDeLicense" },
            "LambdaENIQueue" : { "Ref": "LambdaENIQueue" },
            "Debug": {"Ref": "Debug" },
            "NetworkLoadBalancerQueue" : { "Ref": "NetworkLoadBalancerQueue" }
         }
    }
  },
  "Outputs" : {
    "ScalingParameter": {
      "Value": { "Fn::FindInMap" : [ "ASGScaleMap", "ScalingParam", "CPU" ] },
      "Description": "Scaling Parameter you have selected"
    },
    "ELBName": {
      "Value": { "Ref": "ELBName" },
      "Description": "Elastic Application Load Balancer (Public) name"
    },
    "ELBDNSName": {
      "Value": { "Fn::GetAtt" : ["PublicLoadBalancer", "DNSName"] },
      "Description": "Elastic Application Load Balancer (Public) DNS name"
    },
    "KeyName": {
      "Value": { "Ref": "KeyName" },
      "Description": "Key Pair you have selected for SSH"
    },
    "SSHLocation": {
      "Value": { "Ref": "SSHLocation" },
      "Description": "Make sure you SSH from this IP address"
    },
    "BootstrapS3Bucket": {
      "Value": { "Fn::Join": [ "", [ "arn:aws:s3:::", { "Fn::If" : [ "PANWBootstrap", { "Fn::Join": [ "-", [ { "Fn::FindInMap" : [ "BucketRegionMap", "BootstrapRegion", "DefaultRegion" ]}, { "Ref": "AWS::Region" }]]}, { "Ref" : "BootstrapS3Bucket" }] }] ] },
      "Description": "Your Bootstrap bucket being used for this deployment"
    },
    "LambdaS3Bucket": {
      "Value": { "Fn::Join": [ "", [ "arn:aws:s3:::", { "Fn::If" : [ "PANWScript", { "Fn::Join": [ "-", [ { "Fn::FindInMap" : [ "BucketRegionMap", "LambdaRegion", "DefaultRegion" ]}, { "Ref": "AWS::Region" }]]}, { "Ref" : "LambdaS3Bucket" }] }] ] },
      "Description": "Your Template/Lambda Code bucket being used for this deployment"
    },
    "LambdaCodeFile": {
      "Value": { "Fn::FindInMap" : [ "KeyMap", "Key", "Key" ] },
      "Description": "File name of the Lambda Code being run"
    },
    "NetworkLoadBalancerQueue": {
      "Value": { "Ref": "NetworkLoadBalancerQueue" },
      "Description": "Network Load Balancer queue"
    },
    "NATGateway1": {
      "Value": { "Ref": "EIP1" },
      "Description": "NAT Gateway for Internet access"
    },
    "NATGateway2": {
      "Value": { "Ref": "EIP2" },
      "Description": "NAT Gateway for Internet access"
    }
  }
}
