{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Description" : "Creates a new VPC connected to a TGW with propagated routes, Network Load balancer, with a simple web application",
  "Parameters": {
    "InstanceType": {
      "Description": "Application Instance Size",
      "Type": "String",
      "Default": "t2.medium",
      "AllowedValues": [
        "t1.micro",
        "t2.micro",
        "t2.small",
        "t2.medium",
        "m1.large",
        "m3.xlarge",
        "c4.2xlarge"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
    "KeyName" : {
       "Description" : "EC2 Key Pair",
       "Type" : "AWS::EC2::KeyPair::KeyName"
    },
    "VPCCIDR": {
      "Type": "String",
      "Default": "10.1.0.0/16",
      "Description": "Spoke VPC Prefix",
      "AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription" : "must be a valid CIDR range of the form x.x.x.x/x."
    },
    "NLBSubnetIpBlocks": {
        "Description": "In a comma separated list, enter the spoke VPC's subnetworks prefixes",
        "Type": "CommaDelimitedList",
        "Default": "10.1.1.0/24, 10.1.2.0/24"
    },
    "VPCAZS": {
      "Type": "List<AWS::EC2::AvailabilityZone::Name>",
      "Description": "Select two availability zones for Spoke VPC's subnetworks"
    },
    "NLBName": {
      "Type" : "String",
      "Description": "The name of the internal NLB for the application instances",
      "Default": "nlb",
      "MinLength" : "3",
      "MaxLength" : "120"
    },
    "QueueURL": {
      "Type" : "String",
      "Description": "Enter the URL of the Queue (SQS) to send NLB updates",
      "MinLength" : "3",
      "MaxLength" : "1024"
    },
    "SSHLocation" : {
      "Description" : "Source address to restrict access to the application instances (enter a valid CIDR range in the format of x.x.x.x/x)",
      "Type" : "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default" : "0.0.0.0/0",
      "AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription" : "must be a valid CIDR range of the form x.x.x.x/x."
    },
    "S3BucketName": {
      "Type" : "String",
      "Description": "Name of the S3 Bucket that contains Lambda scripts and CFTs",
      "MinLength" : "3",
      "MaxLength" : "120"
    },
    "TableName": {
      "Type" : "String",
      "Description": "Enter the name of the DynamoDB table",
      "MinLength" : "3",
      "MaxLength" : "120",
      "Default": "nlb_db_tbl"
    },
    "CrossAccountRole": {
      "Type": "String",
      "Description": "Leave blank if same account is set to true.  If the spoke VPC is in a different account, enter the ARN of the role to be used.",
      "Default": ""
    },
    "ExternalId": {
      "Type": "String",
      "Default": "",
      "Description": "Leave blank if same account is set to true.  If the spoke VPC is in a different account, enter the cross account role's external ID",
      "MaxLength" : "120"
    },
    "TGWID": {
      "Type" : "String",
      "Default": "tgw-",
      "Description": "Transit Gateway resource ID (i.e. tgw-xxxxxx)"
  },
    "AssociatedTGWRouteTableID": {
      "Type" : "String",
      "Default": "tgw-rtb-",
      "Description": "Transit Gateway Route Table to associate with the spoke VPC attachment (i.e. tgw-rtb-xxxxxx)",
      "AllowedPattern" : ".+"
    },
    "PropagatedTGWRouteTableID": {
      "Type" : "String",
      "Default": "tgw-rtb-",
      "Description": "Transit Gateway route table resource ID to propagate the spoke VPC attachment (i.e. tgw-rtb-xxxxxx)",
      "AllowedPattern" : ".+"
      },
    "SameAccount": {
      "Type": "String",
      "Default": "true",
      "Description": "Select true if the spoke VPC is in the same account as the VM-Series.  Select false if the spoke VPC is in a different account",
      "AllowedValues": [
        "true",
        "false"
      ]
    }
  },
  "Mappings" : {
    "Constants": {
      "S3URL": {
         "URL1": "https://s3.amazonaws.com"
      },
      "S3MainTpl": {
         "TPL1": "nlb-template/pan_nlb_lambda.template"
      }
    },
    "AWSInstanceType2Arch" : {
      "t1.micro"    : { "Arch" : "PV64"   },
      "t2.micro"    : { "Arch" : "HVM64"  },
      "t2.small"    : { "Arch" : "HVM64"  },
      "t2.medium"   : { "Arch" : "HVM64"  },
      "m1.small"    : { "Arch" : "PV64"   },
      "m1.medium"   : { "Arch" : "PV64"   },
      "m1.large"    : { "Arch" : "PV64"   },
      "m1.xlarge"   : { "Arch" : "PV64"   },
      "m2.xlarge"   : { "Arch" : "PV64"   },
      "m2.2xlarge"  : { "Arch" : "PV64"   },
      "m2.4xlarge"  : { "Arch" : "PV64"   },
      "m3.medium"   : { "Arch" : "HVM64"  },
      "m3.large"    : { "Arch" : "HVM64"  },
      "m3.xlarge"   : { "Arch" : "HVM64"  },
      "m3.2xlarge"  : { "Arch" : "HVM64"  },
      "c1.medium"   : { "Arch" : "PV64"   },
      "c1.xlarge"   : { "Arch" : "PV64"   },
      "c3.large"    : { "Arch" : "HVM64"  },
      "c3.xlarge"   : { "Arch" : "HVM64"  },
      "c3.2xlarge"  : { "Arch" : "HVM64"  },
      "c3.4xlarge"  : { "Arch" : "HVM64"  },
      "c3.8xlarge"  : { "Arch" : "HVM64"  },
      "c4.large"    : { "Arch" : "HVM64"  },
      "c4.xlarge"   : { "Arch" : "HVM64"  },
      "c4.2xlarge"  : { "Arch" : "HVM64"  },
      "c4.4xlarge"  : { "Arch" : "HVM64"  },
      "c4.8xlarge"  : { "Arch" : "HVM64"  },
      "g2.2xlarge"  : { "Arch" : "HVMG2"  },
      "r3.large"    : { "Arch" : "HVM64"  },
      "r3.xlarge"   : { "Arch" : "HVM64"  },
      "r3.2xlarge"  : { "Arch" : "HVM64"  },
      "r3.4xlarge"  : { "Arch" : "HVM64"  },
      "r3.8xlarge"  : { "Arch" : "HVM64"  },
      "i2.xlarge"   : { "Arch" : "HVM64"  },
      "i2.2xlarge"  : { "Arch" : "HVM64"  },
      "i2.4xlarge"  : { "Arch" : "HVM64"  },
      "i2.8xlarge"  : { "Arch" : "HVM64"  },
      "d2.xlarge"   : { "Arch" : "HVM64"  },
      "d2.2xlarge"  : { "Arch" : "HVM64"  },
      "d2.4xlarge"  : { "Arch" : "HVM64"  },
      "d2.8xlarge"  : { "Arch" : "HVM64"  },
      "hi1.4xlarge" : { "Arch" : "HVM64"  },
      "hs1.8xlarge" : { "Arch" : "HVM64"  },
      "cr1.8xlarge" : { "Arch" : "HVM64"  },
      "cc2.8xlarge" : { "Arch" : "HVM64"  }
    },
    "AWSRegionArch2AMI" : {
      "us-east-1"        : {"PV64" : "ami-1ccae774", "HVM64" : "ami-1ecae776", "HVMG2" : "ami-8c6b40e4"},
      "us-east-2"        : {"PV64" : "NOT_SUPPORTED", "HVM64" : "ami-c55673a0", "HVMG2" : "NOT_SUPPORTED"},
      "us-west-2"        : {"PV64" : "ami-ff527ecf", "HVM64" : "ami-e7527ed7", "HVMG2" : "ami-abbe919b"},
      "us-west-1"        : {"PV64" : "ami-d514f291", "HVM64" : "ami-d114f295", "HVMG2" : "ami-f31ffeb7"},
      "eu-west-1"        : {"PV64" : "ami-bf0897c8", "HVM64" : "ami-a10897d6", "HVMG2" : "ami-d5bc24a2"},
      "eu-central-1"     : {"PV64" : "ami-ac221fb1", "HVM64" : "ami-a8221fb5", "HVMG2" : "ami-7cd2ef61"},
      "ap-northeast-1"   : {"PV64" : "ami-27f90e27", "HVM64" : "ami-cbf90ecb", "HVMG2" : "ami-6318e863"},
      "ap-southeast-1"   : {"PV64" : "ami-acd9e8fe", "HVM64" : "ami-68d8e93a", "HVMG2" : "ami-3807376a"},
      "ap-southeast-2"   : {"PV64" : "ami-ff9cecc5", "HVM64" : "ami-fd9cecc7", "HVMG2" : "ami-89790ab3"},
      "sa-east-1"        : {"PV64" : "ami-bb2890a6", "HVM64" : "ami-b52890a8", "HVMG2" : "NOT_SUPPORTED"},
      "cn-north-1"       : {"PV64" : "ami-fa39abc3", "HVM64" : "ami-f239abcb", "HVMG2" : "NOT_SUPPORTED"},
      "eu-west-2"        : {"PV64" : "NOT_SUPPORTED", "HVM64" : "ami-1a7f6d7e", "HVMG2" : "NOT_SUPPORTED"},
      "ca-central-1"     : {"PV64" : "NOT_SUPPORTED", "HVM64" : "ami-fd55ec99", "HVMG2" : "NOT_SUPPORTED"},
      "ap-south-1"       : {"PV64" : "NOT_SUPPORTED", "HVM64" : "ami-4fc58420", "HVMG2" : "NOT_SUPPORTED"},
      "ap-northeast-2"   : {"PV64" : "NOT_SUPPORTED", "HVM64" : "ami-249b554a", "HVMG2" : "NOT_SUPPORTED"}
    }
  },
  "Metadata" : {
    "AWS::CloudFormation::Interface" : {
        "ParameterGroups" : [
            {
                "Label": {"default": "VPC Parameters"},
                "Parameters": ["VPCName", "VPCCIDR", "VPCAZS", "NLBSubnetIpBlocks" ]
            },
            {
                "Label": {"default": "Application Parameters"},
                "Parameters": ["NLBName", "InstanceType", "KeyName", "SSHLocation"]
            },
            {
                "Label": {"default": "Lambda Parameters"},
                "Parameters": ["S3BucketName", "QueueURL", "TableName"]
            },
            {
              "Label" : {"default": "Transit Gateway Parameters"},
              "Parameters" : ["TGWID", "AssociatedTGWRouteTableID", "PropagatedTGWRouteTableID"]
            },
            {
              "Label": {"default": "Cross Account Parameters"},
              "Parameters": ["SameAccount", "CrossAccountRole", "ExternalId"]
            }
        ],
        "ParameterLabels" : {
            "VPCName": {"default": "VPC Name"},
            "VPCCIDR": {"default": "VPC Prefix"},
            "InstanceType": {"default": "Application Instance Type"},
            "KeyName": {"default": "Key Pair"},
            "SSHLocation": {"default": "Security Group Source Prefix"},
            "VPCAZS": {"default": "Subnet Availability Zones"},
            "NLBSubnetIpBlocks": {"default": "Subnet Prefixes"},
            "CrossAccountRole": {"default": "Cross Account Role"},
            "ExternalId": {"default": "Cross Account Role External ID"},
            "SameAccount": {"default": "Same Account"},
            "TGWID": {"default": "Transit Gateway ID"},
            "AssociatedTGWRouteTableID": {"default": "Transit Gateway Route Table - TO ASSOCIATE"},
            "PropagatedTGWRouteTableID": {"default": "Transit Gateway Route Table - TO PROPAGATE"},
            "NLBName": {"default": "NLB Name"},
            "QueueURL": {"default": "VM-Series SQS URL"},
            "S3BucketName": {"default": "Lambda Bucket"},
            "TableName": {"default": "DynamoDB Table"}
      }
    }
  },
  "Resources": {
    "VPC" : {
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
        "CidrBlock" : { "Ref" : "VPCCIDR" },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
          { "Key" : "Network", "Value" : "MGMT" },
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" },  "vpc" ] ] }}
        ]
      }
    },
    "AppSubnet1" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "AvailabilityZone" : { "Fn::Select" : [ "0", {"Ref" : "VPCAZS"} ] },
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : { "Fn::Select" : [ "0", {"Ref" : "NLBSubnetIpBlocks"} ] },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
          { "Key" : "Network", "Value" : "NLB and Web" },
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" },  "app-az2" ] ] }}
        ]
      },
      "DependsOn": [ "VPC" ]
    },
    "AppSubnet2" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "AvailabilityZone" : { "Fn::Select" : [ "1", {"Ref" : "VPCAZS"} ] },
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : { "Fn::Select" : [ "1", {"Ref" : "NLBSubnetIpBlocks"} ] },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
          { "Key" : "Network", "Value" : "NLB and Web" },
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" },  "app-az2" ] ] }}
        ]
      },
      "DependsOn": [ "VPC" ]
    },


   "InternetGateway" : {
     "Type" : "AWS::EC2::InternetGateway",
     "Properties" : {
       "Tags" : [
         { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
         { "Key" : "Network", "Value" : "MGMT" },
         { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" },  "igw" ] ] }}
       ]
     }
   },
   "GatewayToInternet" : {
    "Type" : "AWS::EC2::VPCGatewayAttachment",
    "Properties" : {
      "VpcId" : { "Ref" : "VPC" },
      "InternetGatewayId" : { "Ref" : "InternetGateway" }
    },
    "DependsOn": [ "VPC", "InternetGateway" ]
   },
    "AppSubnetRoute1" : {
      "Type" : "AWS::EC2::Route",
      "Properties" : {
        "RouteTableId" : { "Ref" : "AppSubnetRouteTable" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : { "Ref" : "InternetGateway" }
      },
      "DependsOn": [ "AppSubnetRouteTable", "GatewayToInternet" ]
    },


    "AppSubnetRoute2" : {
        "Type" : "AWS::EC2::Route",
        "Properties" : {
          "RouteTableId" : { "Ref" : "AppSubnetRouteTable" },
          "DestinationCidrBlock" : "10.255.0.0/16",
          "TransitGatewayId" : { "Ref" : "TGWID" }
        },
        "DependsOn": [ "AppSubnetRouteTable", "TGWAttachment" ]
      },

    "TGWAttachment" : {
      "Type" : "AWS::EC2::TransitGatewayAttachment",
      "Properties" : {
          "SubnetIds" : [{ "Ref" : "AppSubnet1" }, { "Ref" : "AppSubnet2" }],
          "Tags" : [ 
            { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" },  "attachment" ] ] }}
          ],
          "TransitGatewayId" : { "Ref" : "TGWID" },
          "VpcId" : { "Ref" : "VPC" }
        }
    },



      "AssociateTGWAttachment" : {
        "Type" : "AWS::EC2::TransitGatewayRouteTableAssociation",
        "Properties" : {
            "TransitGatewayAttachmentId" : { "Ref" : "TGWAttachment" },
            "TransitGatewayRouteTableId" : { "Ref" : "AssociatedTGWRouteTableID" }
          }
      },
  
      "PropagateTGWRouteTableID" : {
        "Type" : "AWS::EC2::TransitGatewayRouteTablePropagation",
        "Properties" : {
            "TransitGatewayAttachmentId" : { "Ref" : "TGWAttachment" },
            "TransitGatewayRouteTableId" : { "Ref" : "PropagatedTGWRouteTableID" }
          }
      },
      




    "AppSubnetRouteTable" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
          { "Key" : "Name", "Value": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" },  "app-rtb" ] ] }}
        ]
      },
      "DependsOn": [ "VPC" ]
    },
    "AppSubnetRouteTableAssociation1" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref": "AppSubnet1" },
        "RouteTableId" : { "Ref" : "AppSubnetRouteTable" }
      },
      "DependsOn": [ "AppSubnet1", "AppSubnetRouteTable" ]
    },
    "AppSubnetRouteTableAssociation2" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref": "AppSubnet2" },
        "RouteTableId" : { "Ref" : "AppSubnetRouteTable" }
      },
      "DependsOn": [ "AppSubnet2", "AppSubnetRouteTable" ]
    },
    "NLBSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "ELB Security Group with HTTP access on port 80",
        "VpcId" : { "Ref" : "VPC" },
        "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" },  "nlb-sg" ] ] } } ],
        "SecurityGroupIngress" : [
                {
                    "IpProtocol" : "-1",
                    "FromPort" : "80",
                    "ToPort" : "80",
                    "CidrIp" : "0.0.0.0/0"}
         ],
        "SecurityGroupEgress" : [
                {
                    "IpProtocol" : "-1",
                    "FromPort" : "80",
                    "ToPort" : "80",
                    "CidrIp" : "0.0.0.0/0"
                }
        ]
      }
    },
    "NLB" : {
      "Type" : "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties" : {
        "Name" : { "Ref" : "NLBName" },
        "Subnets" : [ {"Ref": "AppSubnet1"}, {"Ref": "AppSubnet2"} ],
        "Scheme" : "internal",
        "Type": "network"
      },
      "DependsOn": [ "NLBSecurityGroup" ]
    },
    "AppLaunch" : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Metadata" : {
        "Comment" : "Install a simple application",
        "AWS::CloudFormation::Init" : {
          "config" : {
            "packages" : {
              "yum" : {
                "httpd" : []
              }
            },

            "files" : {
              "/var/www/html/index.html" : {
                "content" : { "Fn::Join" : ["\n", [
                  "<img src=\"https://www.paloaltonetworks.com/content/dam/pan/en_US/images/logos/brand/pan-logo-badge-blue-medium-kick-up.png\" alt=\"VM-Series CloudFormation\" width=\"200\"/>",
                  "<h1>Congratulations, you have successfully launched VM-Series ASG CloudFormation. This file is coming from Webserver Region:", { "Ref" : "AWS::Region" }, "</h1>",
                  "<h1>StackID: ", { "Ref" : "AWS::StackId" }, "</h1>",
                  "<h1>StackName: ", { "Ref" : "AWS::StackName" }, "</h1>",
                  "<h1>AccountID: ", { "Ref" : "AWS::AccountId" }, "</h1>",
                  "<h1>This templates creates - VPC, Subnets, Route Tables, Webservers ASG, Lambda Infra </h1>"
                ]]},
                "mode"    : "000644",
                "owner"   : "root",
                "group"   : "root"
              },

              "/etc/cfn/cfn-hup.conf" : {
                "content" : { "Fn::Join" : ["", [
                  "[main]\n",
                  "stack=", { "Ref" : "AWS::StackId" }, "\n",
                  "region=", { "Ref" : "AWS::Region" }, "\n"
                ]]},
                "mode"    : "000400",
                "owner"   : "root",
                "group"   : "root"
              },
                "/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
                "content": { "Fn::Join" : ["", [
                  "[cfn-auto-reloader-hook]\n",
                  "triggers=post.update\n",
                  "path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init\n",
                  "action=/opt/aws/bin/cfn-init -v ",
                  "         --stack ", { "Ref" : "AWS::StackName" },
                  "         --resource LaunchConfig ",
                  "         --region ", { "Ref" : "AWS::Region" }, "\n",
                  "runas=root\n"
                ]]}
              }
            },

            "services" : {
              "sysvinit" : {
                "httpd"    : { "enabled" : "true", "ensureRunning" : "true" },
                "cfn-hup" : { "enabled" : "true", "ensureRunning" : "true",
                              "files" : ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]}
              }
            }
          }
        }
      },
      "Properties" : {
        "KeyName" : { "Ref" : "KeyName" },
        "AssociatePublicIpAddress" : "true",
        "ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" },
                                          { "Fn::FindInMap" : [ "AWSInstanceType2Arch", "t2.micro", "Arch" ] } ] },
        "SecurityGroups" : [ { "Ref" : "AppSecurityGroup" } ],
        "InstanceType" : "t2.micro",
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -xe\n",
          "sudo yum update -y\n",
          "sudo yum install -y php\n",
          "sudo chkconfig httpd on\n",
          "sudo wget -O /var/www/html/index.php https://raw.githubusercontent.com/wwce/terraform/master/gcp/adv_peering_2fw_2spoke/scripts/showheaders.php\n",
          "sudo service httpd restart\n"
        ]]}}
      }
    },
    "AppSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "VpcId": {
          "Ref": "VPC"
        },
        "GroupDescription" : "Allow access from HTTP and SSH traffic",
        "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" },  "sg" ] ] } } ],
        "SecurityGroupIngress": [
          {
            "IpProtocol": "-1",
            "FromPort": "-1",
            "ToPort": "-1",
            "CidrIp": { "Ref" : "SSHLocation" }
          }
        ]
     }
    },
    "AppServerGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "DependsOn" : [ "AppLaunch" ],
      "Properties" : {
        "AvailabilityZones" : [{ "Fn::Select" : [ "0", {"Ref" : "VPCAZS"} ] }, { "Fn::Select" : [ "1", {"Ref" : "VPCAZS"} ] }],
        "LaunchConfigurationName" : { "Ref" : "AppLaunch" },
        "MinSize" : "2",
        "MaxSize" : "6",
        "TargetGroupARNs" : [ { "Ref" : "AppServerTargetGroup" } ],
        "VPCZoneIdentifier": [  {"Ref" : "AppSubnet1"}, {"Ref" : "AppSubnet2"}  ],
        "Tags": [
                {
                    "ResourceType": "auto-scaling-group",
                    "ResourceId": "AppServerGroup",
                    "PropagateAtLaunch": true,
                    "Value": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" },  "AppServerGroup" ] ] },
                    "Key": "Name"
                }
        ]
      }
    },
    "AppServerTargetGroup": {
       "Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
       "Properties" : {
             "Port" : "80",
             "Protocol" : "TCP",
             "UnhealthyThresholdCount" : "3",
             "VpcId" : { "Ref" : "VPC" }
       }
    },
    "AppServerListener": {
       "Type" : "AWS::ElasticLoadBalancingV2::Listener",
       "Properties" : {
         "DefaultActions" : [{
           "Type": "forward",
           "TargetGroupArn": { "Ref": "AppServerTargetGroup" }
            }],
         "LoadBalancerArn" : {"Ref" : "NLB"},
         "Port" : "80",
         "Protocol" : "TCP"
        },
        "DependsOn": ["AppServerTargetGroup", "NLB"]
    },
    "DeployNLBLambda": {
      "Type" : "AWS::CloudFormation::Stack",
      "Properties" : {
            "TemplateURL" : { "Fn::Join": [ "/", [ { "Fn::FindInMap" : [ "Constants", "S3URL", "URL1" ]},
                              { "Ref": "S3BucketName" }, "pan_nlb_lambda.template" ] ] },
            "Parameters" : {
               "TableName": {"Ref": "TableName"},
               "NLBARN": {"Ref": "NLB"},
               "NLBName": {"Ref": "NLBName"},
               "S3BucketName": {"Ref": "S3BucketName"},
               "S3ObjectName": "nlb.zip",
               "QueueURL": {"Ref": "QueueURL"},
               "RoleARN": {"Ref": "CrossAccountRole"},
               "ExternalId" : {"Ref": "ExternalId"},
               "SameAccount" : {"Ref": "SameAccount"}
            }
      },
      "DependsOn": [ "NLB", "AppLaunch", "AppServerListener" ]
    }
  }
}
